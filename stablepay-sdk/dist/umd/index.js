!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("djed-sdk"),require("react"),require("viem")):"function"==typeof define&&define.amd?define(["djed-sdk","react","viem"],t):(e="undefined"!=typeof globalThis?globalThis:e||self).StablePay=t(e.DjedSdk,e.React,e.viem)}(this,(function(e,t,n){"use strict";const r={sepolia:{uri:"https://ethereum-sepolia.publicnode.com/",chainId:11155111,djedAddress:"0x624FcD0a1F9B5820c950FefD48087531d38387f4",tokens:{stablecoin:{symbol:"SOD",address:"0x6b930182787F346F18666D167e8d32166dC5eFBD",decimals:18,isDirectTransfer:!0},native:{symbol:"ETH",decimals:18,isNative:!0}},feeUI:0},"milkomeda-mainnet":{uri:"https://rpc-mainnet-cardano-evm.c1.milkomeda.com",chainId:2001,djedAddress:"0x67A30B399F5Ed499C1a6Bc0358FA6e42Ea4BCe76",tokens:{stablecoin:{symbol:"MOD",address:"0xcbA90fB1003b9D1bc6a2b66257D2585011b004e9",decimals:18,isDirectTransfer:!0},native:{symbol:"mADA",decimals:18,isNative:!0}},feeUI:0},"ethereum-classic":{uri:"https://rpc.mordor.etccooperative.org",chainId:63,djedAddress:"0xD4548F4b6d08852B56cdabC6be7Fd90953179d68",tokens:{stablecoin:{symbol:"ECSD",address:"0xffD4505B3452Dc22f8473616d50503bA9E1710Ac",decimals:18,isDirectTransfer:!0},native:{symbol:"ETC",decimals:18,isNative:!0}},feeUI:0}};class a{constructor(e,t){this.networkUri=e,this.djedAddress=t}async init(){if(!this.networkUri||!this.djedAddress)throw new Error("Network URI and DJED address are required");try{this.web3=await e.getWeb3(this.networkUri),this.djedContract=e.getDjedContract(this.web3,this.djedAddress);const{stableCoin:t,reserveCoin:n}=await e.getCoinContracts(this.djedContract,this.web3),{scDecimals:r,rcDecimals:a}=await e.getDecimals(t,n);this.stableCoin=t,this.reserveCoin=n,this.scDecimals=r,this.rcDecimals=a,this.oracleContract=await e.getOracleAddress(this.djedContract).then((t=>e.getOracleContract(this.web3,t,this.djedContract._address))),this.oracleAddress=this.oracleContract._address,console.log("Transaction initialized successfully")}catch(e){throw console.error("Error initializing transaction:",e),e}}getBlockchainDetails(){return{web3Available:!!this.web3,djedContractAvailable:!!this.djedContract,stableCoinAddress:this.stableCoin?this.stableCoin._address:"N/A",reserveCoinAddress:this.reserveCoin?this.reserveCoin._address:"N/A",stableCoinDecimals:this.scDecimals,reserveCoinDecimals:this.rcDecimals,oracleAddress:this.oracleAddress||"N/A",oracleContractAvailable:!!this.oracleContract}}async handleTradeDataBuySc(t){if(!this.djedContract)throw new Error("DJED contract is not initialized");if("string"!=typeof t)throw new Error("Amount must be a string");try{return(await e.tradeDataPriceBuySc(this.djedContract,this.scDecimals,t)).totalBCScaled}catch(e){throw console.error("Error fetching trade data for buying stablecoins: ",e),e}}async buyStablecoins(t,n,r){if(!this.djedContract)throw new Error("DJED contract is not initialized");try{console.log(`Building stablecoin purchase transaction from ${t} to ${n} with value ${r}`);const a="0x0232556C83791b8291E9b23BfEa7d67405Bd9839",i=await e.buyScTx(this.djedContract,t,n,r,a,this.djedAddress);return console.log("Transaction built:",i),i}catch(e){throw console.error("Error executing buyStablecoins transaction: ",e),e}}}var i="main_stablePayButton__UA7HC",o="main_logo__ITyEy",s="main_buttonText__N-ewy";const l=({onClick:e,size:n="medium"})=>{const r={small:{width:"200px",height:"50px",fontSize:"14px"},medium:{width:"250px",height:"60px",fontSize:"16px"},large:{width:"300px",height:"70px",fontSize:"18px"}},a={small:{width:"35px",height:"33px"},medium:{width:"40px",height:"38px"},large:{width:"45px",height:"43px"}},l=r[n]||r.medium,c=a[n]||a.medium;return t.createElement("button",{className:i,onClick:e,style:l},t.createElement("div",{className:o,style:c}),t.createElement("span",{className:s},"Pay with StablePay"))};var c={dialogOverlay:"PricingCard_dialogOverlay__0XJrE",pricingCard:"PricingCard_pricingCard__LrWb9",small:"PricingCard_small__J4CHj",medium:"PricingCard_medium__EVmTB",large:"PricingCard_large__A6pnX",dialogClose:"PricingCard_dialogClose__jJ1tM",pricingCardHeader:"PricingCard_pricingCardHeader__wGczA",allianceLogo:"PricingCard_allianceLogo__URa-U",stablepayTitle:"PricingCard_stablepayTitle__4t848",pricingCardBody:"PricingCard_pricingCardBody__0wKQn",selectField:"PricingCard_selectField__LBPoZ",transactionReview:"PricingCard_transactionReview__Ix-eL",transactionInfo:"PricingCard_transactionInfo__Ck-Rc",transactionLabel:"PricingCard_transactionLabel__GDux7",transactionValue:"PricingCard_transactionValue__q-xxp",infoSection:"PricingCard_infoSection__gyjMQ",infoIcon:"PricingCard_infoIcon__rraxD",infoText:"PricingCard_infoText__l4b7A",walletButton:"PricingCard_walletButton__llw4v",loading:"PricingCard_loading__2-tGA",error:"PricingCard_error__m5fK-",networkError:"PricingCard_networkError__zR-36",errorText:"PricingCard_errorText__qZRJt","message-box":"PricingCard_message-box__vkUKy",detailsButton:"PricingCard_detailsButton__jHglL",errorDetails:"PricingCard_errorDetails__CzN-7",loadingContainer:"PricingCard_loadingContainer__6nOVa",spinner:"PricingCard_spinner__9ucQv",spin:"PricingCard_spin__24tni"};const d=({children:e,onClose:n,size:r="medium"})=>t.createElement("div",{className:c.dialogOverlay},t.createElement("div",{className:`${c.pricingCard} ${c[r]}`},t.createElement("button",{className:c.dialogClose,onClick:n},"×"),t.createElement("div",{className:c.pricingCardHeader},t.createElement("div",{className:c.allianceLogo}),t.createElement("h2",{className:c.stablepayTitle},"StablePay")),t.createElement("div",{className:c.pricingCardBody},e)));class u{constructor(e){this.networkSelector=e,this.selectedToken=null}selectToken(e){const t=this.networkSelector.getSelectedNetworkConfig();return!(!t||!t.tokens[e])&&(this.selectedToken={key:e,...t.tokens[e]},!0)}getSelectedToken(){return this.selectedToken}getAvailableTokens(){const e=this.networkSelector.getSelectedNetworkConfig();return e?Object.entries(e.tokens).map((([e,t])=>({key:e,...t}))):[]}resetSelection(){this.selectedToken=null}}const m=t.createContext(),h=({children:e,networkSelector:n})=>{const[r]=t.useState((()=>new u(n))),[a,i]=t.useState(null),[o,s]=t.useState(null),[l,c]=t.useState(null),d=()=>{s(null),c(null)};return t.useEffect((()=>{i(n.selectedNetwork)}),[n.selectedNetwork]),t.createElement(m.Provider,{value:{networkSelector:n,tokenSelector:r,selectedNetwork:a,selectedToken:o,transactionDetails:l,setTransactionDetails:c,selectNetwork:e=>!!n.selectNetwork(e)&&(i(e),d(),!0),selectToken:e=>{if(r.selectToken(e)){const e=r.getSelectedToken();return s(e),!0}return!1},resetSelections:()=>{n.selectNetwork(null),i(null),d()}}},e)},g=()=>{const e=t.useContext(m);if(void 0===e)throw new Error("useNetwork must be used within a NetworkProvider");return e},w=()=>{const{networkSelector:e,selectedNetwork:n,selectNetwork:r}=g();return t.createElement("div",{className:c.selectField},t.createElement("label",{htmlFor:"network-select"},"Select Network"),t.createElement("select",{id:"network-select",onChange:e=>{r(e.target.value)},value:n||""},t.createElement("option",{value:"",disabled:!0},"Select a network"),Object.keys(e.availableNetworks).map((e=>t.createElement("option",{key:e,value:e},e)))))},k=()=>{const{networkSelector:e,tokenSelector:n,selectedNetwork:r,selectedToken:i,selectToken:o,setTransactionDetails:s}=g(),[l,d]=t.useState(!1),[u,m]=t.useState(null),h=r?n.getAvailableTokens():[];return t.createElement("div",{className:c.selectField},t.createElement("label",{htmlFor:"token-select"},"Select Token"),t.createElement("select",{id:"token-select",onChange:async t=>{const i=t.target.value;m(null),d(!0);try{if(o(i)){const t=e.getSelectedNetworkConfig(),o=new a(t.uri,t.djedAddress);await o.init();const l=e.getTokenAmount(i),c=o.getBlockchainDetails();let d=null;"native"===i&&(d=await o.handleTradeDataBuySc(String(l))),s({network:r,token:i,tokenSymbol:n.getSelectedToken().symbol,amount:l,receivingAddress:e.getReceivingAddress(),djedContractAddress:t.djedAddress,isDirectTransfer:n.getSelectedToken().isDirectTransfer||!1,isNativeToken:n.getSelectedToken().isNative||!1,tradeAmount:d?d.amount:null,...c})}}catch(e){console.error("Error fetching transaction details:",e),m("Failed to fetch transaction details. Please try again.")}finally{d(!1)}},value:i?i.key:"",disabled:!r||l},t.createElement("option",{value:"",disabled:!0},r?l?"Loading...":"Select a token":"Please select a network first"),h.map((e=>t.createElement("option",{key:e.key,value:e.key},e.symbol," (",e.isDirectTransfer?"Direct Transfer":"Native",")")))),u&&t.createElement("div",{className:c.error},u))},b=n.defineChain({id:63,name:"Mordor Testnet",network:"mordor",nativeCurrency:{decimals:18,name:"Mordor Ether",symbol:"METC"},rpcUrls:{default:{http:["https://rpc.mordor.etccooperative.org"],webSocket:["wss://rpc.mordor.etccooperative.org/ws"]}},blockExplorers:{default:{name:"BlockScout",url:"https://blockscout.com/etc/mordor"}},testnet:!0}),C=t.createContext(null),f=({children:e})=>{const[r,a]=t.useState(null),[i,o]=t.useState(null),[s,l]=t.useState(null),[c,d]=t.useState(null),[u,m]=t.useState(null),[h,g]=t.useState(null),[w,k]=t.useState(!1),f=b.id,p=t.useCallback((async()=>{if(!window.ethereum)return g("Please install MetaMask or another Web3 wallet"),!1;k(!0),g(null);try{const e=await window.ethereum.request({method:"eth_requestAccounts"});if(0===e.length)throw new Error("No wallet address found. Please unlock your wallet.");const t=await window.ethereum.request({method:"eth_chainId"}),r=parseInt(t,16);if(r!==f)try{await window.ethereum.request({method:"wallet_switchEthereumChain",params:[{chainId:`0x${f.toString(16)}`}]})}catch(e){if(4902!==e.code)throw new Error("Please switch to Mordor Testnet in MetaMask");try{await window.ethereum.request({method:"wallet_addEthereumChain",params:[{chainId:`0x${f.toString(16)}`,chainName:"Mordor Testnet",nativeCurrency:{name:"Mordor ETC",symbol:"METC",decimals:18},rpcUrls:["https://rpc.mordor.etccooperative.org"],blockExplorerUrls:["https://etc-mordor.blockscout.com/"]}]})}catch(e){throw new Error("Failed to add Mordor Testnet to MetaMask")}}const i=n.createWalletClient({chain:b,transport:n.custom(window.ethereum)});a(i),l(e[0]),d(r);const o=n.createPublicClient({chain:b,transport:n.http()}),s=await o.getBalance({address:e[0]});return m(parseFloat(s)/Math.pow(10,18)),window.ethereum.on("accountsChanged",_),window.ethereum.on("chainChanged",y),!0}catch(e){return console.error("Error connecting wallet:",e),g(e.message),!1}finally{k(!1)}}),[]),v=t.useCallback((()=>{o(n.createPublicClient({chain:b,transport:n.http()}))}),[]),y=async e=>{const t=parseInt(e,16);if(d(t),t===f){if(window.ethereum){const e=n.createWalletClient({chain:b,transport:n.custom(window.ethereum)});a(e)}}else g("Wrong network detected. Please switch to Mordor Testnet")},_=async e=>{if(0===e.length)E();else{l(e[0]);const t=n.createPublicClient({chain:b,transport:n.http()}),r=await t.getBalance({address:e[0]});m(parseFloat(r)/Math.pow(10,18))}},E=t.useCallback((()=>{a(null),l(null),d(null),m(null),window.ethereum&&(window.ethereum.removeListener("accountsChanged",_),window.ethereum.removeListener("chainChanged",y))}),[]);return t.useEffect((()=>{v()}),[v]),t.createElement(C.Provider,{value:{walletClient:r,publicClient:i,account:s,chainId:c,balance:u,error:h,isConnecting:w,connectWallet:p,disconnectWallet:E}},e)},p=()=>{const{networkSelector:e,selectedNetwork:r,selectedToken:i,transactionDetails:o,setTransactionDetails:s}=g(),{connectWallet:l,account:d,walletClient:u,publicClient:m,isConnecting:h}=(()=>{const e=t.useContext(C);if(!e)throw new Error("useWallet must be used within a WalletProvider");return e})(),[w,k]=t.useState(null),[b,f]=t.useState(null),[p,v]=t.useState(null),[y,_]=t.useState(""),[E,S]=t.useState(null),[N,T]=t.useState(null),[A,D]=t.useState(!1);if(t.useEffect((()=>{(async()=>{if(r&&i)try{const t=e.getSelectedNetworkConfig(),n=e.getReceivingAddress(),o=e.getTokenAmount(i.key),l=new a(t.uri,t.djedAddress);await l.init(),k(l);let c=null;if("native"===i.key)try{c=await l.handleTradeDataBuySc(String(o)),f(c)}catch(e){console.error("Error fetching trade data:",e)}s({network:r,token:i.key,tokenSymbol:i.symbol,amount:o||"0",receivingAddress:n,djedContractAddress:t.djedAddress,isDirectTransfer:i.isDirectTransfer||!1,isNativeToken:i.isNative||!1,tradeAmount:c?c.amount:null,...l.getBlockchainDetails()})}catch(e){console.error("Error initializing transaction:",e)}})()}),[r,i,e,s]),!o)return t.createElement("div",{className:c.loading},"Initializing transaction...");return t.createElement("div",{className:c.transactionReview},t.createElement("div",{className:c.transactionInfo},t.createElement("span",{className:c.transactionLabel},"Network:"),t.createElement("span",{className:c.transactionValue},o.network)),t.createElement("div",{className:c.transactionInfo},t.createElement("span",{className:c.transactionLabel},"You Pay:"),t.createElement("span",{className:c.transactionValue},"stablecoin"===i.key?`${o.amount} ${o.tokenSymbol}`:`${b||"Calculating..."} ${o.tokenSymbol}`)),t.createElement("button",{className:c.walletButton,onClick:async()=>{await l()&&console.log("Wallet connected:",d)},disabled:h},h?"Connecting...":"Connect Wallet"),d&&!p&&t.createElement("button",{className:c.walletButton,onClick:async()=>{if(d&&o&&w)try{_("⏳ Preparing transaction...");const e=o.receivingAddress;let t;if("native"===i.key){const r="0x0232556C83791b8291E9b23BfEa7d67405Bd9839",a=b||"0";t=await w.buyStablecoins(d,e,n.parseEther(String(a)),r)}else{const r=o.amount?n.parseUnits(String(o.amount),o.stableCoinDecimals):"0";t={to:"0xdc86935A9597aA3A9008d2f26232233043091284",data:n.encodeFunctionData({abi:[{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"}],functionName:"transfer",args:[e,r]}),account:d}}v(t),_("✅ Transaction ready! Click 'Send Transaction' to proceed.")}catch(e){T(e),_("❌ Transaction preparation failed.")}else _("❌ Wallet not connected or transaction details missing")}},"Prepare Transaction"),d&&p&&t.createElement("button",{className:c.walletButton,onClick:async()=>{try{if(!u||!d||!p)return void _("❌ Wallet client, account, or transaction data is missing");_("⏳ Sending transaction...");const e=await u.sendTransaction({...p,account:d});S(e),_("✅ Transaction sent!")}catch(e){T(e),_("❌ Transaction failed.")}},disabled:null!==E},"Send Transaction"),y&&t.createElement("div",{className:"message-box"},y,N&&t.createElement("button",{onClick:()=>D(!A),className:c.detailsButton},A?"Hide Details":"Show Details")),A&&N&&t.createElement("div",{className:c.errorDetails},t.createElement("pre",null,N.message)),E&&t.createElement("div",{className:c.transactionLink},"✅ Transaction Hash:"," ",t.createElement("a",{href:`https://blockscout.com/etc/mordor/tx/${E}`,target:"_blank",rel:"noopener noreferrer",className:c.explorerLink,style:{color:"#007bff",textDecoration:"underline",fontWeight:"bold",cursor:"pointer",wordBreak:"break-word"}},E.slice(0,6),"...",E.slice(-6))))},v=({onClose:e,buttonSize:n})=>{const{resetSelections:r}=g();return t.createElement(d,{onClose:()=>{r(),e()},size:n},t.createElement(w,null),t.createElement(k,null),t.createElement(p,null))},y=({onClose:e,buttonSize:n,networkSelector:r})=>t.createElement(h,{networkSelector:r},t.createElement(f,null,t.createElement(v,{onClose:e,buttonSize:n})));return{NetworkSelector:class{constructor(e){this.merchantConfig=e,this.blacklist=e.getBlacklist(),this.availableNetworks=this.getAvailableNetworks(),this.selectedNetwork=null}getAvailableNetworks(){return Object.entries(r).reduce(((e,[t,n])=>(this.blacklist.includes(n.chainId)||(e[t]=n),e)),{})}selectNetwork(e){return null===e?(this.selectedNetwork=null,console.log("Network selection reset"),!0):this.availableNetworks[e]?(this.selectedNetwork=e,console.log(`Network selected: ${e}`),!0):(console.error(`Invalid network: ${e}`),!1)}getSelectedNetworkConfig(){return this.selectedNetwork?this.availableNetworks[this.selectedNetwork]:null}getReceivingAddress(){return this.merchantConfig.getReceivingAddress()}getTokenAmount(e){return this.merchantConfig.getTokenAmount(this.selectedNetwork,e)}},Transaction:a,MerchantConfig:class{constructor(e={}){this.receivingAddress=e.receivingAddress||"",this.blacklist=e.blacklist||[],this.amounts=e.Amounts||{},this.validateConfig()}validateConfig(){if(!this.receivingAddress)throw new Error("Receiving address is required");for(const[e,t]of Object.entries(this.amounts)){if(!r[e])throw new Error(`Invalid network: ${e}`);if(!t.stablecoin||"number"!=typeof t.stablecoin||t.stablecoin<=0)throw new Error(`Invalid stablecoin amount for network ${e}`)}}getBlacklist(){return this.blacklist}getReceivingAddress(){return this.receivingAddress}getTokenAmount(e){console.log("Getting amount for network:",e),console.log("Amounts object:",this.amounts);const t=this.amounts[e]?.stablecoin;return console.log("Returning amount:",t),t||0}},Widget:({networkSelector:e,buttonSize:n="medium"})=>{const[r,a]=t.useState(!1);return t.createElement("div",{className:c.widgetContainer},!r&&t.createElement(l,{onClick:()=>{a(!0)},size:n}),r&&t.createElement(y,{onClose:()=>{a(!1)},buttonSize:n,networkSelector:e}))},PayButton:l,Dialog:d,NetworkDropdown:w}}));
//# sourceMappingURL=index.js.map
