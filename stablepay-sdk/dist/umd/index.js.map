{"version":3,"file":"index.js","sources":["../../src/utils/config.js","../../src/core/Transaction.js","../../src/widget/PayButton.jsx","../../src/widget/Dialog.jsx","../../src/core/TokenSelector.js","../../src/contexts/NetworkContext.jsx","../../src/widget/NetworkDropdown.jsx","../../src/widget/TokenDropdown.jsx","../../src/contexts/chains.js","../../src/contexts/WalletContext.jsx","../../src/widget/TransactionReview.jsx","../../src/widget/Widget.jsx","../../src/index.js","../../src/core/NetworkSelector.js","../../src/core/MerchantConfig.js"],"sourcesContent":["// src/utils/config.js\r\nexport const networksConfig = {\r\n  'sepolia': {\r\n    uri: 'https://ethereum-sepolia.publicnode.com/',\r\n    chainId: 11155111,\r\n    djedAddress: '0x624FcD0a1F9B5820c950FefD48087531d38387f4',\r\n    tokens: {\r\n      stablecoin: {\r\n        symbol: 'SOD',\r\n        address: '0x6b930182787F346F18666D167e8d32166dC5eFBD',\r\n        decimals: 18,\r\n        isDirectTransfer: true\r\n      },\r\n      native: {\r\n        symbol: 'ETH',\r\n        decimals: 18,\r\n        isNative: true\r\n      }\r\n    },\r\n    feeUI: 0\r\n  },\r\n  'milkomeda-mainnet': {\r\n    uri: 'https://rpc-mainnet-cardano-evm.c1.milkomeda.com',\r\n    chainId: 2001,\r\n    djedAddress: '0x67A30B399F5Ed499C1a6Bc0358FA6e42Ea4BCe76',\r\n    tokens: {\r\n      stablecoin: {\r\n        symbol: 'MOD',\r\n        address: '0xcbA90fB1003b9D1bc6a2b66257D2585011b004e9',\r\n        decimals: 18,\r\n        isDirectTransfer: true\r\n      },\r\n      native: {\r\n        symbol: 'mADA',\r\n        decimals: 18,\r\n        isNative: true\r\n      }\r\n    },\r\n    feeUI: 0\r\n  },\r\n  'ethereum-classic': {  //Mordor Testnet details\r\n    uri: 'https://rpc.mordor.etccooperative.org',  // Mordor RPC\r\n    chainId: 63,  \r\n    djedAddress: '0xD4548F4b6d08852B56cdabC6be7Fd90953179d68',  //Mordor DJED contract\r\n    tokens: {\r\n      stablecoin: {\r\n        symbol: 'ECSD',\r\n        address: '0xffD4505B3452Dc22f8473616d50503bA9E1710Ac',  //  Mordor Stablecoin\r\n        decimals: 18,\r\n        isDirectTransfer: true\r\n      },\r\n      native: {\r\n        symbol: 'ETC',\r\n        decimals: 18,\r\n        isNative: true\r\n      }\r\n    },\r\n    feeUI: 0\r\n  }\r\n};","import { getWeb3, getDjedContract, getCoinContracts, getDecimals, getOracleAddress, getOracleContract, tradeDataPriceBuySc, buyScTx } from 'djed-sdk';\r\n\r\nexport class Transaction {\r\n  constructor(networkUri, djedAddress) {\r\n    this.networkUri = networkUri;\r\n    this.djedAddress = djedAddress;\r\n  }\r\n\r\n  async init() {\r\n    if (!this.networkUri || !this.djedAddress) {\r\n      throw new Error('Network URI and DJED address are required');\r\n    }\r\n\r\n    try {\r\n      this.web3 = await getWeb3(this.networkUri);\r\n      this.djedContract = getDjedContract(this.web3, this.djedAddress);\r\n      const { stableCoin, reserveCoin } = await getCoinContracts(this.djedContract, this.web3);\r\n      const { scDecimals, rcDecimals } = await getDecimals(stableCoin, reserveCoin);\r\n      this.stableCoin = stableCoin;\r\n      this.reserveCoin = reserveCoin;\r\n      this.scDecimals = scDecimals;\r\n      this.rcDecimals = rcDecimals;\r\n\r\n      // Get the oracle contract\r\n      this.oracleContract = await getOracleAddress(this.djedContract).then((addr) =>\r\n        getOracleContract(this.web3, addr, this.djedContract._address)\r\n      );\r\n\r\n      this.oracleAddress = this.oracleContract._address;\r\n\r\n      console.log('Transaction initialized successfully');\r\n    } catch (error) {\r\n      console.error('Error initializing transaction:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  getBlockchainDetails() {\r\n    return {\r\n      web3Available: !!this.web3,\r\n      djedContractAvailable: !!this.djedContract,\r\n      stableCoinAddress: this.stableCoin ? this.stableCoin._address : 'N/A',\r\n      reserveCoinAddress: this.reserveCoin ? this.reserveCoin._address : 'N/A',\r\n      stableCoinDecimals: this.scDecimals,\r\n      reserveCoinDecimals: this.rcDecimals,\r\n      oracleAddress: this.oracleAddress || 'N/A',\r\n      oracleContractAvailable: !!this.oracleContract,\r\n    };\r\n  }\r\n\r\n  async handleTradeDataBuySc(amountScaled) {\r\n    if (!this.djedContract) {\r\n      throw new Error(\"DJED contract is not initialized\");\r\n    }\r\n    if (typeof amountScaled !== 'string') {\r\n      throw new Error(\"Amount must be a string\");\r\n    }\r\n    try {\r\n      const result = await tradeDataPriceBuySc(this.djedContract, this.scDecimals, amountScaled);\r\n      return result.totalBCScaled; //converted ETH equivalent\r\n    } catch (error) {\r\n      console.error(\"Error fetching trade data for buying stablecoins: \", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // use buyScTx directly\r\n  async buyStablecoins(payer, receiver, value) {\r\n    if (!this.djedContract) {\r\n      throw new Error(\"DJED contract is not initialized\");\r\n    }\r\n    try {\r\n      console.log(`Building stablecoin purchase transaction from ${payer} to ${receiver} with value ${value}`);\r\n\r\n      //Hardcoded UI address\r\n      const UI = '0x0232556C83791b8291E9b23BfEa7d67405Bd9839';\r\n\r\n      //buyScTx from djed-sdk\r\n      const txData = await buyScTx(this.djedContract, payer, receiver, value, UI, this.djedAddress);\r\n\r\n      console.log(\"Transaction built:\", txData);\r\n      return txData;\r\n    } catch (error) {\r\n      console.error(\"Error executing buyStablecoins transaction: \", error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport styles from \"../styles/main.css\";\r\n\r\nconst PayButton = ({ onClick, size = \"medium\" }) => {\r\n  const sizeStyles = {\r\n    small: { width: \"200px\", height: \"50px\", fontSize: \"14px\" },\r\n    medium: { width: \"250px\", height: \"60px\", fontSize: \"16px\" },\r\n    large: { width: \"300px\", height: \"70px\", fontSize: \"18px\" },\r\n  };\r\n\r\n  const logoSizes = {\r\n    small: { width: \"35px\", height: \"33px\" },\r\n    medium: { width: \"40px\", height: \"38px\" },\r\n    large: { width: \"45px\", height: \"43px\" },\r\n  };\r\n\r\n  const buttonStyle = sizeStyles[size] || sizeStyles.medium;\r\n  const logoStyle = logoSizes[size] || logoSizes.medium;\r\n\r\n  return (\r\n    <button\r\n      className={styles.stablePayButton}\r\n      onClick={onClick}\r\n      style={buttonStyle}\r\n    >\r\n      <div className={styles.logo} style={logoStyle} />\r\n      <span className={styles.buttonText}>Pay with StablePay</span>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default PayButton;\r\n","import React from 'react';\r\nimport styles from '../styles/PricingCard.css';\r\n\r\n\r\nconst Dialog = ({ children, onClose, size = 'medium' }) => {\r\n  return (\r\n    <div className={styles.dialogOverlay}>\r\n      <div className={`${styles.pricingCard} ${styles[size]}`}>\r\n        <button className={styles.dialogClose} onClick={onClose}>×</button>\r\n        <div className={styles.pricingCardHeader}>\r\n        <div className={styles.allianceLogo}></div>\r\n\r\n          <h2 className={styles.stablepayTitle}>StablePay</h2>\r\n        </div>\r\n        <div className={styles.pricingCardBody}>\r\n          {children}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dialog;","// TokenSelector.js\r\n\r\nexport class TokenSelector {\r\n  constructor(networkSelector) {\r\n    this.networkSelector = networkSelector;\r\n    this.selectedToken = null;\r\n  }\r\n\r\n  selectToken(tokenKey) {\r\n    const networkConfig = this.networkSelector.getSelectedNetworkConfig();\r\n    if (networkConfig && networkConfig.tokens[tokenKey]) {\r\n      this.selectedToken = {\r\n        key: tokenKey,\r\n        ...networkConfig.tokens[tokenKey]\r\n      };\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getSelectedToken() {\r\n    return this.selectedToken;\r\n  }\r\n\r\n  getAvailableTokens() {\r\n    const networkConfig = this.networkSelector.getSelectedNetworkConfig();\r\n    if (!networkConfig) return [];\r\n\r\n    return Object.entries(networkConfig.tokens).map(([key, config]) => ({\r\n      key,\r\n      ...config\r\n    }));\r\n  }\r\n\r\n  resetSelection() {\r\n    this.selectedToken = null;\r\n  }\r\n}","import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { TokenSelector } from '../core/TokenSelector';\r\n\r\nconst NetworkContext = createContext();\r\n\r\nexport const NetworkProvider = ({ children, networkSelector }) => {\r\n  const [tokenSelector] = useState(() => new TokenSelector(networkSelector));\r\n  const [selectedNetwork, setSelectedNetwork] = useState(null);\r\n  const [selectedToken, setSelectedToken] = useState(null);\r\n  const [transactionDetails, setTransactionDetails] = useState(null);\r\n\r\n  const resetState = () => {\r\n    setSelectedToken(null);\r\n    setTransactionDetails(null);\r\n  };\r\n\r\n  const selectNetwork = (networkKey) => {\r\n    if (networkSelector.selectNetwork(networkKey)) {\r\n      setSelectedNetwork(networkKey);\r\n      resetState(); \r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const selectToken = (tokenKey) => {\r\n    if (tokenSelector.selectToken(tokenKey)) {\r\n      const token = tokenSelector.getSelectedToken();\r\n      setSelectedToken(token);\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const resetSelections = () => {\r\n    networkSelector.selectNetwork(null);\r\n    setSelectedNetwork(null);\r\n    resetState();\r\n  };\r\n\r\n  // Synchronize context state with NetworkSelector\r\n  useEffect(() => {\r\n    setSelectedNetwork(networkSelector.selectedNetwork);\r\n  }, [networkSelector.selectedNetwork]);\r\n\r\n  return (\r\n    <NetworkContext.Provider value={{ \r\n      networkSelector,\r\n      tokenSelector,\r\n      selectedNetwork,\r\n      selectedToken,\r\n      transactionDetails,\r\n      setTransactionDetails,\r\n      selectNetwork,\r\n      selectToken,\r\n      resetSelections\r\n    }}>\r\n      {children}\r\n    </NetworkContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useNetwork = () => {\r\n  const context = useContext(NetworkContext);\r\n  if (context === undefined) {\r\n    throw new Error('useNetwork must be used within a NetworkProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default NetworkContext;","import React from 'react';\r\nimport { useNetwork } from '../contexts/NetworkContext';\r\nimport styles from '../styles/PricingCard.css';\r\n\r\nconst NetworkDropdown = () => {\r\n  const { networkSelector, selectedNetwork, selectNetwork } = useNetwork();\r\n\r\n  const handleNetworkChange = (event) => {\r\n    selectNetwork(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.selectField}>\r\n      <label htmlFor=\"network-select\">Select Network</label>\r\n      <select \r\n        id=\"network-select\"\r\n        onChange={handleNetworkChange} \r\n        value={selectedNetwork || \"\"}\r\n      >\r\n        <option value=\"\" disabled>Select a network</option>\r\n        {Object.keys(networkSelector.availableNetworks).map((networkKey) => (\r\n          <option key={networkKey} value={networkKey}>{networkKey}</option>\r\n        ))}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NetworkDropdown;","import React, { useState } from \"react\";\r\nimport { useNetwork } from \"../contexts/NetworkContext\";\r\nimport { Transaction } from \"../core/Transaction\";\r\nimport styles from \"../styles/PricingCard.css\";\r\n\r\nconst TokenDropdown = () => {\r\n  const {\r\n    networkSelector,\r\n    tokenSelector,\r\n    selectedNetwork,\r\n    selectedToken,\r\n    selectToken,\r\n    setTransactionDetails,\r\n  } = useNetwork();\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const handleTokenChange = async (event) => {\r\n    const newValue = event.target.value;\r\n    setError(null);\r\n    setLoading(true);\r\n\r\n    try {\r\n      if (selectToken(newValue)) {\r\n        const networkConfig = networkSelector.getSelectedNetworkConfig();\r\n        const transaction = new Transaction(\r\n          networkConfig.uri,\r\n          networkConfig.djedAddress\r\n        );\r\n        await transaction.init();\r\n\r\n        const tokenAmount = networkSelector.getTokenAmount(newValue);\r\n        const blockchainDetails = transaction.getBlockchainDetails();\r\n\r\n        let tradeData = null;\r\n        if (newValue === \"native\") {\r\n          tradeData = await transaction.handleTradeDataBuySc(\r\n            String(tokenAmount)\r\n          );\r\n        }\r\n\r\n        setTransactionDetails({\r\n          network: selectedNetwork,\r\n          token: newValue,\r\n          tokenSymbol: tokenSelector.getSelectedToken().symbol,\r\n          amount: tokenAmount,\r\n          receivingAddress: networkSelector.getReceivingAddress(),\r\n          djedContractAddress: networkConfig.djedAddress,\r\n          isDirectTransfer:\r\n            tokenSelector.getSelectedToken().isDirectTransfer || false,\r\n          isNativeToken: tokenSelector.getSelectedToken().isNative || false,\r\n          tradeAmount: tradeData ? tradeData.amount : null,\r\n          ...blockchainDetails,\r\n        });\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error fetching transaction details:\", err);\r\n      setError(\"Failed to fetch transaction details. Please try again.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const availableTokens = selectedNetwork\r\n    ? tokenSelector.getAvailableTokens()\r\n    : [];\r\n\r\n  return (\r\n    <div className={styles.selectField}>\r\n      <label htmlFor=\"token-select\">Select Token</label>\r\n      <select\r\n        id=\"token-select\"\r\n        onChange={handleTokenChange}\r\n        value={selectedToken ? selectedToken.key : \"\"}\r\n        disabled={!selectedNetwork || loading}\r\n      >\r\n        <option value=\"\" disabled>\r\n          {selectedNetwork\r\n            ? loading\r\n              ? \"Loading...\"\r\n              : \"Select a token\"\r\n            : \"Please select a network first\"}\r\n        </option>\r\n        {availableTokens.map((token) => (\r\n          <option key={token.key} value={token.key}>\r\n            {token.symbol} (\r\n            {token.isDirectTransfer ? \"Direct Transfer\" : \"Native\"})\r\n          </option>\r\n        ))}\r\n      </select>\r\n      {error && <div className={styles.error}>{error}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TokenDropdown;\r\n","import { defineChain } from 'viem';\r\n\r\nexport const mordor = defineChain({\r\n  id: 63,\r\n  name: 'Mordor Testnet',\r\n  network: 'mordor',\r\n  nativeCurrency: {\r\n    decimals: 18,\r\n    name: 'Mordor Ether',\r\n    symbol: 'METC',\r\n  },\r\n  rpcUrls: {\r\n    default: {\r\n      http: ['https://rpc.mordor.etccooperative.org'],\r\n      webSocket: ['wss://rpc.mordor.etccooperative.org/ws'],\r\n    },\r\n  },\r\n  blockExplorers: {\r\n    default: { name: 'BlockScout', url: 'https://blockscout.com/etc/mordor' },\r\n  },\r\n  testnet: true,\r\n});\r\n","import React, { createContext, useContext, useState, useCallback, useEffect } from 'react';\r\nimport { createWalletClient, createPublicClient, custom, http } from 'viem';\r\nimport { mordor } from './chains';\r\n\r\nconst WalletContext = createContext(null);\r\n\r\nexport const useWallet = () => {\r\n  const context = useContext(WalletContext);\r\n  if (!context) {\r\n    throw new Error('useWallet must be used within a WalletProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const WalletProvider = ({ children }) => {\r\n  const [walletClient, setWalletClient] = useState(null);\r\n  const [publicClient, setPublicClient] = useState(null);\r\n  const [account, setAccount] = useState(null);\r\n  const [chainId, setChainId] = useState(null);\r\n  const [balance, setBalance] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [isConnecting, setIsConnecting] = useState(false);\r\n\r\n  const expectedChainId = mordor.id; // Use Mordor Testnet\r\n\r\n  const connectWallet = useCallback(async () => {\r\n    if (!window.ethereum) {\r\n      setError('Please install MetaMask or another Web3 wallet');\r\n      return false;\r\n    }\r\n\r\n    setIsConnecting(true);\r\n    setError(null);\r\n\r\n    try {\r\n      // Request account access first\r\n      const accounts = await window.ethereum.request({ \r\n        method: 'eth_requestAccounts' \r\n      });\r\n\r\n      if (accounts.length === 0) {\r\n        throw new Error('No wallet address found. Please unlock your wallet.');\r\n      }\r\n\r\n      const chainIdHex = await window.ethereum.request({ method: 'eth_chainId' });\r\n      const currentChainId = parseInt(chainIdHex, 16);\r\n\r\n      if (currentChainId !== expectedChainId) {\r\n        // Try to switch to Mordor network\r\n        try {\r\n          await window.ethereum.request({\r\n            method: 'wallet_switchEthereumChain',\r\n            params: [{ chainId: `0x${expectedChainId.toString(16)}` }],\r\n          });\r\n        } catch (switchError) {\r\n          // This error code indicates that the chain has not been added to MetaMask\r\n          if (switchError.code === 4902) {\r\n            try {\r\n              await window.ethereum.request({\r\n                method: 'wallet_addEthereumChain',\r\n                params: [\r\n                  {\r\n                    chainId: `0x${expectedChainId.toString(16)}`,\r\n                    chainName: 'Mordor Testnet',\r\n                    nativeCurrency: {\r\n                      name: 'Mordor ETC',\r\n                      symbol: 'METC',\r\n                      decimals: 18,\r\n                    },\r\n                    rpcUrls: ['https://rpc.mordor.etccooperative.org'],\r\n                    blockExplorerUrls: ['https://etc-mordor.blockscout.com/'],\r\n                  },\r\n                ],\r\n              });\r\n            } catch (addError) {\r\n              throw new Error('Failed to add Mordor Testnet to MetaMask');\r\n            }\r\n          } else {\r\n            throw new Error('Please switch to Mordor Testnet in MetaMask');\r\n          }\r\n        }\r\n      }\r\n\r\n      const walletClient = createWalletClient({\r\n        chain: mordor,\r\n        transport: custom(window.ethereum),\r\n      });\r\n\r\n      setWalletClient(walletClient);\r\n      setAccount(accounts[0]);\r\n      setChainId(currentChainId);\r\n\r\n      const publicClient = createPublicClient({ chain: mordor, transport: http() });\r\n      const balance = await publicClient.getBalance({ address: accounts[0] });\r\n      setBalance(parseFloat(balance) / Math.pow(10, 18));\r\n\r\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\r\n      window.ethereum.on('chainChanged', handleChainChanged);\r\n\r\n      return true;\r\n    } catch (err) {\r\n      console.error('Error connecting wallet:', err);\r\n      setError(err.message);\r\n      return false;\r\n    } finally {\r\n      setIsConnecting(false);\r\n    }\r\n  }, []);\r\n\r\n  const connectPublicClient = useCallback(() => {\r\n    setPublicClient(createPublicClient({ chain: mordor, transport: http() }));\r\n  }, []);\r\n\r\n  const handleChainChanged = async (chainIdHex) => {\r\n    const newChainId = parseInt(chainIdHex, 16);\r\n    setChainId(newChainId);\r\n\r\n    if (newChainId !== expectedChainId) {\r\n      setError(`Wrong network detected. Please switch to Mordor Testnet`);\r\n      return;\r\n    }\r\n\r\n    if (window.ethereum) {\r\n      const walletClient = createWalletClient({ chain: mordor, transport: custom(window.ethereum) });\r\n      setWalletClient(walletClient);\r\n    }\r\n  };\r\n\r\n  const handleAccountsChanged = async (accounts) => {\r\n    if (accounts.length === 0) {\r\n      disconnectWallet();\r\n    } else {\r\n      setAccount(accounts[0]);\r\n\r\n      const publicClient = createPublicClient({ chain: mordor, transport: http() });\r\n      const balance = await publicClient.getBalance({ address: accounts[0] });\r\n      setBalance(parseFloat(balance) / Math.pow(10, 18));\r\n    }\r\n  };\r\n\r\n  const disconnectWallet = useCallback(() => {\r\n    setWalletClient(null);\r\n    setAccount(null);\r\n    setChainId(null);\r\n    setBalance(null);\r\n\r\n    if (window.ethereum) {\r\n      window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\r\n      window.ethereum.removeListener('chainChanged', handleChainChanged);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    connectPublicClient();\r\n  }, [connectPublicClient]);\r\n\r\n  return (\r\n    <WalletContext.Provider\r\n      value={{\r\n        walletClient,\r\n        publicClient,\r\n        account,\r\n        chainId,\r\n        balance,\r\n        error,\r\n        isConnecting,\r\n        connectWallet,\r\n        disconnectWallet,\r\n      }}\r\n    >\r\n      {children}\r\n    </WalletContext.Provider>\r\n  );\r\n};","import React, { useState, useEffect } from \"react\";\r\nimport { useNetwork } from \"../contexts/NetworkContext\";\r\nimport { useWallet } from \"../contexts/WalletContext\";\r\nimport { Transaction } from \"../core/Transaction\";\r\nimport { parseEther, encodeFunctionData, parseUnits } from \"viem\"; \r\nimport styles from \"../styles/PricingCard.css\";\r\n\r\nconst STABLECOIN_CONTRACT_ADDRESS = \"0xdc86935A9597aA3A9008d2f26232233043091284\"; \r\n\r\nconst TransactionReview = () => {\r\n  const {\r\n    networkSelector,\r\n    selectedNetwork,\r\n    selectedToken,\r\n    transactionDetails: contextTransactionDetails,\r\n    setTransactionDetails,\r\n  } = useNetwork();\r\n\r\n  const {\r\n    connectWallet,\r\n    account,\r\n    walletClient,\r\n    publicClient,\r\n    isConnecting,\r\n  } = useWallet();\r\n\r\n  const [transaction, setTransaction] = useState(null);\r\n  const [tradeDataBuySc, setTradeDataBuySc] = useState(null);\r\n  const [txData, setTxData] = useState(null);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [txHash, setTxHash] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [isErrorDetailsVisible, setIsErrorDetailsVisible] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const initializeTransaction = async () => {\r\n      if (!selectedNetwork || !selectedToken) return;\r\n\r\n      try {\r\n        const networkConfig = networkSelector.getSelectedNetworkConfig();\r\n        const receivingAddress = networkSelector.getReceivingAddress();\r\n        const tokenAmount = networkSelector.getTokenAmount(selectedToken.key);\r\n\r\n        const newTransaction = new Transaction(\r\n          networkConfig.uri,\r\n          networkConfig.djedAddress\r\n        );\r\n        await newTransaction.init();\r\n        setTransaction(newTransaction);\r\n\r\n        let tradeData = null;\r\n        if (selectedToken.key === \"native\") {\r\n          try {\r\n            tradeData = await newTransaction.handleTradeDataBuySc(String(tokenAmount));\r\n            setTradeDataBuySc(tradeData);\r\n          } catch (tradeError) {\r\n            console.error(\"Error fetching trade data:\", tradeError);\r\n          }\r\n        }\r\n\r\n        setTransactionDetails({\r\n          network: selectedNetwork,\r\n          token: selectedToken.key,\r\n          tokenSymbol: selectedToken.symbol,\r\n          amount: tokenAmount || \"0\",\r\n          receivingAddress,\r\n          djedContractAddress: networkConfig.djedAddress,\r\n          isDirectTransfer: selectedToken.isDirectTransfer || false,\r\n          isNativeToken: selectedToken.isNative || false,\r\n          tradeAmount: tradeData ? tradeData.amount : null,\r\n          ...newTransaction.getBlockchainDetails(),\r\n        });\r\n      } catch (err) {\r\n        console.error(\"Error initializing transaction:\", err);\r\n      }\r\n    };\r\n\r\n    initializeTransaction();\r\n  }, [selectedNetwork, selectedToken, networkSelector, setTransactionDetails]);\r\n\r\n  if (!contextTransactionDetails) {\r\n    return <div className={styles.loading}>Initializing transaction...</div>;\r\n  }\r\n\r\n  const handleConnectWallet = async () => {\r\n    const success = await connectWallet();\r\n    if (success) {\r\n      console.log(\"Wallet connected:\", account);\r\n    }\r\n  };\r\n\r\n  const handleSendTransaction = async () => {\r\n    if (!account || !contextTransactionDetails || !transaction) {\r\n      setMessage(\"❌ Wallet not connected or transaction details missing\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setMessage(\"⏳ Preparing transaction...\");\r\n\r\n      const receiver = contextTransactionDetails.receivingAddress;\r\n      let builtTx;\r\n\r\n      if (selectedToken.key === \"native\") {\r\n        const UI = \"0x0232556C83791b8291E9b23BfEa7d67405Bd9839\";\r\n        const amountToSend = tradeDataBuySc || \"0\";\r\n\r\n        builtTx = await transaction.buyStablecoins(\r\n          account,\r\n          receiver,\r\n          parseEther(String(amountToSend)),\r\n          UI\r\n        );\r\n      } else {\r\n        const amountToSend = contextTransactionDetails.amount\r\n          ? parseUnits(\r\n              String(contextTransactionDetails.amount),\r\n              contextTransactionDetails.stableCoinDecimals\r\n            )\r\n          : \"0\";\r\n\r\n        builtTx = {\r\n          to: STABLECOIN_CONTRACT_ADDRESS,\r\n          data: encodeFunctionData({\r\n            abi: [\r\n              {\r\n                inputs: [\r\n                  { internalType: \"address\", name: \"to\", type: \"address\" },\r\n                  { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\r\n                ],\r\n                name: \"transfer\",\r\n                outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n                stateMutability: \"nonpayable\",\r\n                type: \"function\",\r\n              },\r\n            ],\r\n            functionName: \"transfer\",\r\n            args: [receiver, amountToSend],\r\n          }),\r\n          account: account,\r\n        };\r\n      }\r\n\r\n      setTxData(builtTx);\r\n      setMessage(\"✅ Transaction ready! Click 'Send Transaction' to proceed.\");\r\n    } catch (error) {\r\n      setError(error);\r\n      setMessage(`❌ Transaction preparation failed.`);\r\n    }\r\n  };\r\n\r\n  const handleBuySc = async () => {\r\n    try {\r\n      if (!walletClient || !account || !txData) {\r\n        setMessage(\"❌ Wallet client, account, or transaction data is missing\");\r\n        return;\r\n      }\r\n\r\n      setMessage(\"⏳ Sending transaction...\");\r\n\r\n      const txHash = await walletClient.sendTransaction({\r\n        ...txData,\r\n        account: account,\r\n      });\r\n\r\n      setTxHash(txHash);\r\n      setMessage(`✅ Transaction sent!`);\r\n    } catch (error) {\r\n      setError(error);\r\n      setMessage(`❌ Transaction failed.`);\r\n    }\r\n  };\r\n\r\n  const getExplorerUrl = () => {\r\n    if (!txHash || !selectedNetwork) return null;\r\n\r\n    const explorerBaseUrls = {\r\n      \"ethereum-classic\": \"https://etc-mordor.blockscout.com/tx/\",\r\n      \"sepolia\": \"https://sepolia.etherscan.io/tx/\",\r\n      \"milkomeda-mainnet\": \"https://explorer-mainnet-cardano-evm.c1.milkomeda.com/tx/\",\r\n    };\r\n\r\n    return explorerBaseUrls[selectedNetwork]\r\n      ? `${explorerBaseUrls[selectedNetwork]}${txHash}`\r\n      : null;\r\n  };\r\n\r\n  return (\r\n    <div className={styles.transactionReview}>\r\n      <div className={styles.transactionInfo}>\r\n        <span className={styles.transactionLabel}>Network:</span>\r\n        <span className={styles.transactionValue}>{contextTransactionDetails.network}</span>\r\n      </div>\r\n\r\n      <div className={styles.transactionInfo}>\r\n        <span className={styles.transactionLabel}>You Pay:</span>\r\n        <span className={styles.transactionValue}>\r\n          {selectedToken.key === \"stablecoin\"\r\n            ? `${contextTransactionDetails.amount} ${contextTransactionDetails.tokenSymbol}`\r\n            : `${tradeDataBuySc ? tradeDataBuySc : \"Calculating...\"} ${\r\n                contextTransactionDetails.tokenSymbol\r\n              }`}\r\n        </span>\r\n      </div>\r\n\r\n      <button className={styles.walletButton} onClick={handleConnectWallet} disabled={isConnecting}>\r\n        {isConnecting ? \"Connecting...\" : \"Connect Wallet\"}\r\n      </button>\r\n\r\n      {account && !txData && (\r\n        <button className={styles.walletButton} onClick={handleSendTransaction}>\r\n          Prepare Transaction\r\n        </button>\r\n      )}\r\n      {account && txData && (\r\n  <button \r\n    className={styles.walletButton} \r\n    onClick={handleBuySc} \r\n    disabled={txHash !== null} // Disable the button when txHash is set\r\n  >\r\n    Send Transaction\r\n  </button>\r\n)}\r\n\r\n\r\n      {message && (\r\n        <div className=\"message-box\">\r\n          {message}\r\n          {error && (\r\n            <button\r\n              onClick={() => setIsErrorDetailsVisible(!isErrorDetailsVisible)}\r\n              className={styles.detailsButton}\r\n            >\r\n              {isErrorDetailsVisible ? \"Hide Details\" : \"Show Details\"}\r\n            </button>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {isErrorDetailsVisible && error && (\r\n        <div className={styles.errorDetails}>\r\n          <pre>{error.message}</pre>\r\n        </div>\r\n      )}\r\n\r\n      \r\n      {txHash && (\r\n  <div className={styles.transactionLink}>\r\n    ✅ Transaction Hash:{\" \"}\r\n    <a\r\n      href={`https://blockscout.com/etc/mordor/tx/${txHash}`}\r\n      target=\"_blank\"\r\n      rel=\"noopener noreferrer\"\r\n      className={styles.explorerLink}\r\n      style={{ \r\n        color: \"#007bff\", \r\n        textDecoration: \"underline\", \r\n        fontWeight: \"bold\", \r\n        cursor: \"pointer\",\r\n        wordBreak: \"break-word\" \r\n      }}\r\n    >\r\n      {txHash.slice(0, 6)}...{txHash.slice(-6)}\r\n    </a>\r\n  </div>\r\n)}\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TransactionReview;\r\n","import React, { useState } from \"react\";\r\nimport PayButton from \"./PayButton\";\r\nimport Dialog from \"./Dialog\";\r\nimport NetworkDropdown from \"./NetworkDropdown\";\r\nimport TokenDropdown from \"./TokenDropdown\";\r\nimport TransactionReview from \"./TransactionReview\";\r\nimport { NetworkProvider, useNetwork } from \"../contexts/NetworkContext\";\r\nimport { WalletProvider } from \"../contexts/WalletContext\";\r\nimport styles from \"../styles/PricingCard.css\";\r\n\r\nconst WidgetContent = ({ onClose, buttonSize }) => {\r\n  const { resetSelections } = useNetwork(); \r\n\r\n  const handleClose = () => {\r\n    resetSelections(); // Reset selections when closing the widget\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <Dialog onClose={handleClose} size={buttonSize}>\r\n      <NetworkDropdown />\r\n      <TokenDropdown />\r\n      <TransactionReview />\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nconst WidgetWithProviders = ({ onClose, buttonSize, networkSelector }) => {\r\n  return (\r\n    <NetworkProvider networkSelector={networkSelector}>\r\n      <WalletProvider> \r\n        <WidgetContent onClose={onClose} buttonSize={buttonSize} />\r\n      </WalletProvider>\r\n    </NetworkProvider>\r\n  );\r\n};\r\n\r\nexport const Widget = ({ networkSelector, buttonSize = \"medium\" }) => {\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n\r\n  const handleOpenDialog = () => {\r\n    setIsDialogOpen(true);\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setIsDialogOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.widgetContainer}>\r\n      {!isDialogOpen && (\r\n        <PayButton onClick={handleOpenDialog} size={buttonSize} />\r\n      )}\r\n      {isDialogOpen && (\r\n        <WidgetWithProviders\r\n          onClose={handleCloseDialog}\r\n          buttonSize={buttonSize}\r\n          networkSelector={networkSelector}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Widget;\r\n","// src/index.js\r\nimport { NetworkSelector } from './core/NetworkSelector';\r\nimport { Transaction } from './core/Transaction';\r\nimport { MerchantConfig } from './core/MerchantConfig';\r\nimport Widget from './widget/Widget.jsx';\r\nimport PayButton from './widget/PayButton.jsx';\r\nimport Dialog from './widget/Dialog.jsx';\r\nimport NetworkDropdown from './widget/NetworkDropdown.jsx';\r\nimport './styles/main.css';\r\nimport './styles/PricingCard.css';\r\n\r\nconst StablePay = {\r\n  NetworkSelector,\r\n  Transaction,\r\n  MerchantConfig,\r\n  Widget,\r\n  PayButton,\r\n  Dialog,\r\n  NetworkDropdown\r\n};\r\n\r\nexport default StablePay;","import { networksConfig } from \"../utils/config\";\r\n\r\nexport class NetworkSelector {\r\n  constructor(merchantConfig) {\r\n    this.merchantConfig = merchantConfig;\r\n    this.blacklist = merchantConfig.getBlacklist();\r\n    this.availableNetworks = this.getAvailableNetworks();\r\n    this.selectedNetwork = null;\r\n  }\r\n\r\n  getAvailableNetworks() {\r\n    return Object.entries(networksConfig).reduce(\r\n      (acc, [networkKey, networkConfig]) => {\r\n        if (!this.blacklist.includes(networkConfig.chainId)) {\r\n          acc[networkKey] = networkConfig;\r\n        }\r\n        return acc;\r\n      },\r\n      {}\r\n    );\r\n  }\r\n\r\n  selectNetwork(networkKey) {\r\n    if (networkKey === null) {\r\n      this.selectedNetwork = null;\r\n      console.log(\"Network selection reset\");\r\n      return true;\r\n    }\r\n    if (this.availableNetworks[networkKey]) {\r\n      this.selectedNetwork = networkKey;\r\n      console.log(`Network selected: ${networkKey}`);\r\n      return true;\r\n    }\r\n    console.error(`Invalid network: ${networkKey}`);\r\n    return false;\r\n  }\r\n\r\n  getSelectedNetworkConfig() {\r\n    return this.selectedNetwork\r\n      ? this.availableNetworks[this.selectedNetwork]\r\n      : null;\r\n  }\r\n\r\n  getReceivingAddress() {\r\n    return this.merchantConfig.getReceivingAddress();\r\n  }\r\n\r\n  getTokenAmount(token) {\r\n    return this.merchantConfig.getTokenAmount(this.selectedNetwork, token);\r\n  }\r\n}\r\n","import { networksConfig } from \"../utils/config\";\r\n\r\nexport class MerchantConfig {\r\n  constructor(options = {}) {\r\n    this.receivingAddress = options.receivingAddress || \"\";\r\n    this.blacklist = options.blacklist || [];\r\n    this.amounts = options.Amounts || {}; // Note the capital 'A' in Amounts\r\n    this.validateConfig();\r\n  }\r\n\r\n  validateConfig() {\r\n    if (!this.receivingAddress) {\r\n      throw new Error(\"Receiving address is required\");\r\n    }\r\n    // Validate stablecoin amounts\r\n    for (const [network, tokens] of Object.entries(this.amounts)) {\r\n      if (!networksConfig[network]) {\r\n        throw new Error(`Invalid network: ${network}`);\r\n      }\r\n      if (\r\n        !tokens.stablecoin ||\r\n        typeof tokens.stablecoin !== \"number\" ||\r\n        tokens.stablecoin <= 0\r\n      ) {\r\n        throw new Error(`Invalid stablecoin amount for network ${network}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  getBlacklist() {\r\n    return this.blacklist;\r\n  }\r\n\r\n  getReceivingAddress() {\r\n    return this.receivingAddress;\r\n  }\r\n\r\n  // getTokenAmount(network, token) {\r\n  //   const networkConfig = networksConfig[network];\r\n  //   if (!networkConfig) return 0;\r\n\r\n  //   const stablecoinSymbol = networkConfig.tokens.stablecoin.symbol;\r\n\r\n  //   if (token === 'stablecoin') {\r\n  //     return this.amounts[network]?.stablecoin || 0;\r\n  //   }\r\n  //   // For native tokens, return 0 as it's not specified in the new structure\r\n  //   return 0;\r\n  // }\r\n  getTokenAmount(network) {\r\n    console.log(\"Getting amount for network:\", network);\r\n    console.log(\"Amounts object:\", this.amounts);\r\n\r\n    // Directly return the stablecoin amount for the network\r\n    const amount = this.amounts[network]?.stablecoin;\r\n    console.log(\"Returning amount:\", amount);\r\n\r\n    return amount || 0;\r\n  }\r\n}\r\n\r\nexport default MerchantConfig;\r\n"],"names":["networksConfig","sepolia","uri","chainId","djedAddress","tokens","stablecoin","symbol","address","decimals","isDirectTransfer","native","isNative","feeUI","Transaction","constructor","networkUri","this","init","Error","web3","getWeb3","djedContract","getDjedContract","stableCoin","reserveCoin","getCoinContracts","scDecimals","rcDecimals","getDecimals","oracleContract","getOracleAddress","then","addr","getOracleContract","_address","oracleAddress","console","log","error","getBlockchainDetails","web3Available","djedContractAvailable","stableCoinAddress","reserveCoinAddress","stableCoinDecimals","reserveCoinDecimals","oracleContractAvailable","handleTradeDataBuySc","amountScaled","tradeDataPriceBuySc","totalBCScaled","buyStablecoins","payer","receiver","value","UI","txData","buyScTx","PayButton","onClick","size","sizeStyles","small","width","height","fontSize","medium","large","logoSizes","buttonStyle","logoStyle","React","createElement","className","styles","style","Dialog","children","onClose","dialogOverlay","pricingCard","dialogClose","pricingCardHeader","allianceLogo","stablepayTitle","pricingCardBody","TokenSelector","networkSelector","selectedToken","selectToken","tokenKey","networkConfig","getSelectedNetworkConfig","key","getSelectedToken","getAvailableTokens","Object","entries","map","config","resetSelection","NetworkContext","createContext","NetworkProvider","tokenSelector","useState","selectedNetwork","setSelectedNetwork","setSelectedToken","transactionDetails","setTransactionDetails","resetState","useEffect","Provider","selectNetwork","networkKey","token","resetSelections","useNetwork","context","useContext","undefined","NetworkDropdown","selectField","htmlFor","id","onChange","event","target","disabled","keys","availableNetworks","TokenDropdown","loading","setLoading","setError","availableTokens","async","newValue","transaction","tokenAmount","getTokenAmount","blockchainDetails","tradeData","String","network","tokenSymbol","amount","receivingAddress","getReceivingAddress","djedContractAddress","isNativeToken","tradeAmount","err","mordor","defineChain","name","nativeCurrency","rpcUrls","default","http","webSocket","blockExplorers","url","testnet","WalletContext","WalletProvider","walletClient","setWalletClient","publicClient","setPublicClient","account","setAccount","setChainId","balance","setBalance","isConnecting","setIsConnecting","expectedChainId","connectWallet","useCallback","window","ethereum","accounts","request","method","length","chainIdHex","currentChainId","parseInt","params","toString","switchError","code","chainName","blockExplorerUrls","addError","createWalletClient","chain","transport","custom","createPublicClient","getBalance","parseFloat","Math","pow","on","handleAccountsChanged","handleChainChanged","message","connectPublicClient","newChainId","disconnectWallet","removeListener","TransactionReview","contextTransactionDetails","useWallet","setTransaction","tradeDataBuySc","setTradeDataBuySc","setTxData","setMessage","txHash","setTxHash","isErrorDetailsVisible","setIsErrorDetailsVisible","newTransaction","tradeError","initializeTransaction","transactionReview","transactionInfo","transactionLabel","transactionValue","walletButton","builtTx","amountToSend","parseEther","parseUnits","to","data","encodeFunctionData","abi","inputs","internalType","type","outputs","stateMutability","functionName","args","sendTransaction","detailsButton","errorDetails","transactionLink","href","rel","explorerLink","color","textDecoration","fontWeight","cursor","wordBreak","slice","WidgetContent","buttonSize","handleClose","WidgetWithProviders","NetworkSelector","merchantConfig","blacklist","getBlacklist","getAvailableNetworks","reduce","acc","includes","MerchantConfig","options","amounts","Amounts","validateConfig","Widget","isDialogOpen","setIsDialogOpen","widgetContainer","handleOpenDialog","handleCloseDialog"],"mappings":"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"}