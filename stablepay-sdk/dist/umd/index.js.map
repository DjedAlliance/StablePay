{"version":3,"file":"index.js","sources":["../../src/utils/config.js","../../src/core/Transaction.js","../../src/widget/PayButton.jsx","../../src/widget/Dialog.jsx","../../src/core/TokenSelector.js","../../src/contexts/NetworkContext.jsx","../../src/widget/NetworkDropdown.jsx","../../src/widget/TokenDropdown.jsx","../../src/contexts/WalletContext.jsx","../../src/widget/TransactionReview.jsx","../../src/widget/Widget.jsx","../../src/index.js","../../src/core/NetworkSelector.js","../../src/core/MerchantConfig.js"],"sourcesContent":["// src/utils/config.js\nexport const networksConfig = {\n  'sepolia': {\n    uri: 'https://ethereum-sepolia.publicnode.com/',\n    chainId: 11155111,\n    djedAddress: '0x624FcD0a1F9B5820c950FefD48087531d38387f4',\n    tokens: {\n      stablecoin: {\n        symbol: 'SOD',\n        address: '0x6b930182787F346F18666D167e8d32166dC5eFBD',\n        decimals: 18,\n        isDirectTransfer: true\n      },\n      native: {\n        symbol: 'ETH',\n        decimals: 18,\n        isNative: true\n      }\n    },\n    feeUI: 0\n  },\n  'milkomeda-mainnet': {\n    uri: 'https://rpc-mainnet-cardano-evm.c1.milkomeda.com',\n    chainId: 2001,\n    djedAddress: '0x67A30B399F5Ed499C1a6Bc0358FA6e42Ea4BCe76',\n    tokens: {\n      stablecoin: {\n        symbol: 'MOD',\n        address: '0xcbA90fB1003b9D1bc6a2b66257D2585011b004e9',\n        decimals: 18,\n        isDirectTransfer: true\n      },\n      native: {\n        symbol: 'mADA',\n        decimals: 18,\n        isNative: true\n      }\n    },\n    feeUI: 0\n  },\n  'ethereum-classic': {\n    uri: 'https://etc.rivet.link',\n    chainId: 61,\n    djedAddress: '0xCc3664d7021FD36B1Fe2b136e2324710c8442cCf',\n    tokens: {\n      stablecoin: {\n        symbol: 'ECSD',\n        address: '0x5A7Ca94F6E969C94bef4CE5e2f90ed9d4891918A',\n        decimals: 18,\n        isDirectTransfer: true\n      },\n      native: {\n        symbol: 'ETC',\n        decimals: 18,\n        isNative: true\n      }\n    },\n    feeUI: 0\n  }\n};","import { getWeb3, getDjedContract, getCoinContracts, getDecimals,getOracleAddress,getOracleContract,tradeDataPriceBuySc } from 'djed-sdk';\n\nexport class Transaction {\n  constructor(networkUri, djedAddress) {\n    this.networkUri = networkUri;\n    this.djedAddress = djedAddress;\n  }\n\n  async init() {\n    if (!this.networkUri || !this.djedAddress) {\n      throw new Error('Network URI and DJED address are required');\n    }\n\n    try {\n      this.web3 = await getWeb3(this.networkUri);\n      this.djedContract = getDjedContract(this.web3, this.djedAddress);\n      const { stableCoin, reserveCoin } = await getCoinContracts(this.djedContract, this.web3);\n      const { scDecimals, rcDecimals } = await getDecimals(stableCoin, reserveCoin);\n      this.stableCoin = stableCoin;\n      this.reserveCoin = reserveCoin;\n      this.scDecimals = scDecimals;\n      this.rcDecimals = rcDecimals;\n\n      // Get the oracle contract\n      this.oracleContract = await getOracleAddress(this.djedContract).then((addr) =>\n        getOracleContract(this.web3, addr, this.djedContract._address)\n      );\n\n      this.oracleAddress = this.oracleContract._address;\n\n      console.log('Transaction initialized successfully');\n    } catch (error) {\n      console.error('Error initializing transaction:', error);\n      throw error;\n    }\n  }\n\n  getBlockchainDetails() {\n    return {\n      web3Available: !!this.web3,\n      djedContractAvailable: !!this.djedContract,\n      stableCoinAddress: this.stableCoin ? this.stableCoin._address : 'N/A',\n      reserveCoinAddress: this.reserveCoin ? this.reserveCoin._address : 'N/A',\n      stableCoinDecimals: this.scDecimals,\n      reserveCoinDecimals: this.rcDecimals,\n      oracleAddress: this.oracleAddress || 'N/A',\n      oracleContractAvailable: !!this.oracleContract,\n    };\n  }\n\n  async handleTradeDataBuySc(amountScaled) {\n    if (!this.djedContract) {\n      throw new Error(\"DJED contract is not initialized\");\n    }\n    if (typeof amountScaled !== 'string') {\n      throw new Error(\"Amount must be a string\");\n    }\n    try {\n      const result = await tradeDataPriceBuySc(this.djedContract, this.scDecimals, amountScaled);\n      return result.totalBCScaled;\n    } catch (error) {\n      console.error(\"Error fetching trade data for buying stablecoins: \", error);\n      throw error;\n    }\n  }\n}\n","import React from \"react\";\nimport styles from \"../styles/main.css\";\n\nconst PayButton = ({ onClick, size = \"medium\" }) => {\n  const sizeStyles = {\n    small: { width: \"200px\", height: \"50px\", fontSize: \"14px\" },\n    medium: { width: \"250px\", height: \"60px\", fontSize: \"16px\" },\n    large: { width: \"300px\", height: \"70px\", fontSize: \"18px\" },\n  };\n\n  const logoSizes = {\n    small: { width: \"35px\", height: \"33px\" },\n    medium: { width: \"40px\", height: \"38px\" },\n    large: { width: \"45px\", height: \"43px\" },\n  };\n\n  const buttonStyle = sizeStyles[size] || sizeStyles.medium;\n  const logoStyle = logoSizes[size] || logoSizes.medium;\n\n  return (\n    <button\n      className={styles.stablePayButton}\n      onClick={onClick}\n      style={buttonStyle}\n    >\n      <div className={styles.logo} style={logoStyle} />\n      <span className={styles.buttonText}>Pay with StablePay</span>\n    </button>\n  );\n};\n\nexport default PayButton;\n","import React from 'react';\nimport styles from '../styles/PricingCard.css';\n\n\nconst Dialog = ({ children, onClose, size = 'medium' }) => {\n  return (\n    <div className={styles.dialogOverlay}>\n      <div className={`${styles.pricingCard} ${styles[size]}`}>\n        <button className={styles.dialogClose} onClick={onClose}>Ã—</button>\n        <div className={styles.pricingCardHeader}>\n        <div className={styles.allianceLogo}></div>\n\n          <h2 className={styles.stablepayTitle}>StablePay</h2>\n        </div>\n        <div className={styles.pricingCardBody}>\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Dialog;","// TokenSelector.js\n\nexport class TokenSelector {\n  constructor(networkSelector) {\n    this.networkSelector = networkSelector;\n    this.selectedToken = null;\n  }\n\n  selectToken(tokenKey) {\n    const networkConfig = this.networkSelector.getSelectedNetworkConfig();\n    if (networkConfig && networkConfig.tokens[tokenKey]) {\n      this.selectedToken = {\n        key: tokenKey,\n        ...networkConfig.tokens[tokenKey]\n      };\n      return true;\n    }\n    return false;\n  }\n\n  getSelectedToken() {\n    return this.selectedToken;\n  }\n\n  getAvailableTokens() {\n    const networkConfig = this.networkSelector.getSelectedNetworkConfig();\n    if (!networkConfig) return [];\n\n    return Object.entries(networkConfig.tokens).map(([key, config]) => ({\n      key,\n      ...config\n    }));\n  }\n\n  resetSelection() {\n    this.selectedToken = null;\n  }\n}","import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { TokenSelector } from '../core/TokenSelector';\n\nconst NetworkContext = createContext();\n\nexport const NetworkProvider = ({ children, networkSelector }) => {\n  const [tokenSelector] = useState(() => new TokenSelector(networkSelector));\n  const [selectedNetwork, setSelectedNetwork] = useState(null);\n  const [selectedToken, setSelectedToken] = useState(null);\n  const [transactionDetails, setTransactionDetails] = useState(null);\n\n  const resetState = () => {\n    setSelectedToken(null);\n    setTransactionDetails(null);\n  };\n\n  const selectNetwork = (networkKey) => {\n    if (networkSelector.selectNetwork(networkKey)) {\n      setSelectedNetwork(networkKey);\n      resetState(); \n      return true;\n    }\n    return false;\n  };\n\n  const selectToken = (tokenKey) => {\n    if (tokenSelector.selectToken(tokenKey)) {\n      const token = tokenSelector.getSelectedToken();\n      setSelectedToken(token);\n      return true;\n    }\n    return false;\n  };\n\n  const resetSelections = () => {\n    networkSelector.selectNetwork(null);\n    setSelectedNetwork(null);\n    resetState();\n  };\n\n  // Synchronize context state with NetworkSelector\n  useEffect(() => {\n    setSelectedNetwork(networkSelector.selectedNetwork);\n  }, [networkSelector.selectedNetwork]);\n\n  return (\n    <NetworkContext.Provider value={{ \n      networkSelector,\n      tokenSelector,\n      selectedNetwork,\n      selectedToken,\n      transactionDetails,\n      setTransactionDetails,\n      selectNetwork,\n      selectToken,\n      resetSelections\n    }}>\n      {children}\n    </NetworkContext.Provider>\n  );\n};\n\nexport const useNetwork = () => {\n  const context = useContext(NetworkContext);\n  if (context === undefined) {\n    throw new Error('useNetwork must be used within a NetworkProvider');\n  }\n  return context;\n};\n\nexport default NetworkContext;","import React from 'react';\nimport { useNetwork } from '../contexts/NetworkContext';\nimport styles from '../styles/PricingCard.css';\n\nconst NetworkDropdown = () => {\n  const { networkSelector, selectedNetwork, selectNetwork } = useNetwork();\n\n  const handleNetworkChange = (event) => {\n    selectNetwork(event.target.value);\n  };\n\n  return (\n    <div className={styles.selectField}>\n      <label htmlFor=\"network-select\">Select Network</label>\n      <select \n        id=\"network-select\"\n        onChange={handleNetworkChange} \n        value={selectedNetwork || \"\"}\n      >\n        <option value=\"\" disabled>Select a network</option>\n        {Object.keys(networkSelector.availableNetworks).map((networkKey) => (\n          <option key={networkKey} value={networkKey}>{networkKey}</option>\n        ))}\n      </select>\n    </div>\n  );\n};\n\nexport default NetworkDropdown;","import React, { useState } from \"react\";\nimport { useNetwork } from \"../contexts/NetworkContext\";\nimport { Transaction } from \"../core/Transaction\";\nimport styles from \"../styles/PricingCard.css\";\n\nconst TokenDropdown = () => {\n  const {\n    networkSelector,\n    tokenSelector,\n    selectedNetwork,\n    selectedToken,\n    selectToken,\n    setTransactionDetails,\n  } = useNetwork();\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const handleTokenChange = async (event) => {\n    const newValue = event.target.value;\n    setError(null);\n    setLoading(true);\n\n    try {\n      if (selectToken(newValue)) {\n        const networkConfig = networkSelector.getSelectedNetworkConfig();\n        const transaction = new Transaction(\n          networkConfig.uri,\n          networkConfig.djedAddress\n        );\n        await transaction.init();\n\n        const tokenAmount = networkSelector.getTokenAmount(newValue);\n        const blockchainDetails = transaction.getBlockchainDetails();\n\n        let tradeData = null;\n        if (newValue === \"native\") {\n          tradeData = await transaction.handleTradeDataBuySc(\n            String(tokenAmount)\n          );\n        }\n\n        setTransactionDetails({\n          network: selectedNetwork,\n          token: newValue,\n          tokenSymbol: tokenSelector.getSelectedToken().symbol,\n          amount: tokenAmount,\n          receivingAddress: networkSelector.getReceivingAddress(),\n          djedContractAddress: networkConfig.djedAddress,\n          isDirectTransfer:\n            tokenSelector.getSelectedToken().isDirectTransfer || false,\n          isNativeToken: tokenSelector.getSelectedToken().isNative || false,\n          tradeAmount: tradeData ? tradeData.amount : null,\n          ...blockchainDetails,\n        });\n      }\n    } catch (err) {\n      console.error(\"Error fetching transaction details:\", err);\n      setError(\"Failed to fetch transaction details. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const availableTokens = selectedNetwork\n    ? tokenSelector.getAvailableTokens()\n    : [];\n\n  return (\n    <div className={styles.selectField}>\n      <label htmlFor=\"token-select\">Select Token</label>\n      <select\n        id=\"token-select\"\n        onChange={handleTokenChange}\n        value={selectedToken ? selectedToken.key : \"\"}\n        disabled={!selectedNetwork || loading}\n      >\n        <option value=\"\" disabled>\n          {selectedNetwork\n            ? loading\n              ? \"Loading...\"\n              : \"Select a token\"\n            : \"Please select a network first\"}\n        </option>\n        {availableTokens.map((token) => (\n          <option key={token.key} value={token.key}>\n            {token.symbol} (\n            {token.isDirectTransfer ? \"Direct Transfer\" : \"Native\"})\n          </option>\n        ))}\n      </select>\n      {error && <div className={styles.error}>{error}</div>}\n    </div>\n  );\n};\n\nexport default TokenDropdown;\n","import React, { createContext, useContext, useState, useCallback } from \"react\";\nimport { createWalletClient, custom } from \"viem\";\nimport { sepolia, mainnet } from \"viem/chains\";\n\nconst WalletContext = createContext(null);\n\nexport const useWallet = () => {\n  const context = useContext(WalletContext);\n  if (!context) {\n    throw new Error(\"useWallet must be used within a WalletProvider\");\n  }\n  return context;\n};\n\nexport const WalletProvider = ({ children, networkConfig }) => {\n  const [walletClient, setWalletClient] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [chainId, setChainId] = useState(null);\n  const [error, setError] = useState(null);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [networkError, setNetworkError] = useState(null);\n\n  const getChainConfig = (chainId) => {\n    const chains = {\n      1: mainnet,\n      11155111: sepolia,\n      //to-do:add more chains here\n    };\n    return chains[chainId];\n  };\n\n  const checkNetwork = async (currentChainId) => {\n    const expectedChainId = getExpectedChainId();\n\n    if (currentChainId !== expectedChainId) {\n      const errorMsg = `Wrong network detected. Please switch to ${getNetworkName(\n        expectedChainId\n      )}`;\n      console.log(errorMsg);\n      setNetworkError(errorMsg);\n      return false;\n    }\n\n    setNetworkError(null);\n    return true;\n  };\n\n  const getExpectedChainId = () => {\n    return 11155111;\n  };\n\n  const getNetworkName = (chainId) => {\n    const networks = {\n      1: \"Ethereum Mainnet\",\n      11155111: \"Sepolia Testnet\",\n    };\n    return networks[chainId] || \"Unknown Network\";\n  };\n\n  const connectWallet = useCallback(async () => {\n    if (!window.ethereum) {\n      setError(\"Please install MetaMask or another Web3 wallet\");\n      return false;\n    }\n\n    setIsConnecting(true);\n    setError(null);\n\n    try {\n      const accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      const chainIdHex = await window.ethereum.request({\n        method: \"eth_chainId\",\n      });\n      const currentChainId = parseInt(chainIdHex, 16);\n\n      await checkNetwork(currentChainId);\n\n      const chain = getChainConfig(currentChainId);\n      if (!chain) {\n        throw new Error(\"Unsupported chain\");\n      }\n\n      const client = createWalletClient({\n        chain,\n        transport: custom(window.ethereum),\n      });\n\n      setWalletClient(client);\n      setAccount(accounts[0]);\n      setChainId(currentChainId);\n\n      window.ethereum.on(\"accountsChanged\", handleAccountsChanged);\n      window.ethereum.on(\"chainChanged\", handleChainChanged);\n\n      return true;\n    } catch (err) {\n      console.error(\"Error connecting wallet:\", err);\n      setError(err.message);\n      return false;\n    } finally {\n      setIsConnecting(false);\n    }\n  }, []);\n\n  const handleChainChanged = async (chainIdHex) => {\n    const newChainId = parseInt(chainIdHex, 16);\n    setChainId(newChainId);\n\n    await checkNetwork(newChainId);\n\n    const chain = getChainConfig(newChainId);\n    if (chain && window.ethereum) {\n      const client = createWalletClient({\n        chain,\n        transport: custom(window.ethereum),\n      });\n      setWalletClient(client);\n    }\n  };\n\n  const disconnectWallet = useCallback(() => {\n    setWalletClient(null);\n    setAccount(null);\n    setChainId(null);\n    setNetworkError(null);\n\n    if (window.ethereum) {\n      window.ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n      window.ethereum.removeListener(\"chainChanged\", handleChainChanged);\n    }\n  }, []);\n\n  const handleAccountsChanged = (accounts) => {\n    if (accounts.length === 0) {\n      disconnectWallet();\n    } else {\n      setAccount(accounts[0]);\n    }\n  };\n\n  return (\n    <WalletContext.Provider\n      value={{\n        walletClient,\n        account,\n        chainId,\n        error,\n        networkError,\n        isConnecting,\n        connectWallet,\n        disconnectWallet,\n        checkNetwork,\n      }}\n    >\n      {children}\n    </WalletContext.Provider>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { useNetwork } from \"../contexts/NetworkContext\";\nimport { useWallet } from \"../contexts/WalletContext\";\nimport { Transaction } from \"../core/Transaction\";\nimport styles from \"../styles/PricingCard.css\";\n\nconst TransactionReview = () => {\n  const {\n    networkSelector,\n    tokenSelector,\n    selectedNetwork,\n    selectedToken,\n    transactionDetails: contextTransactionDetails,\n    setTransactionDetails,\n  } = useNetwork();\n\n  const {\n    connectWallet,\n    account,\n    chainId,\n    error: walletError,\n    networkError,\n    isConnecting,\n  } = useWallet();\n\n  //  using Local transaction states here\n  const [transaction, setTransaction] = useState(null);\n  const [tradeDataBuySc, setTradeDataBuySc] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const initializeTransaction = async () => {\n      if (selectedNetwork && selectedToken) {\n        setLoading(true);\n        setError(null);\n        try {\n          const networkConfig = networkSelector.getSelectedNetworkConfig();\n          const receivingAddress = networkSelector.getReceivingAddress();\n          const tokenAmount = networkSelector.getTokenAmount(selectedToken.key);\n\n          console.log(\"Selected Token Key:\", selectedToken.key);\n          console.log(\"Token Amount:\", tokenAmount);\n\n          const newTransaction = new Transaction(\n            networkConfig.uri,\n            networkConfig.djedAddress\n          );\n          await newTransaction.init();\n          setTransaction(newTransaction);\n\n          const blockchainDetails = newTransaction.getBlockchainDetails();\n\n          console.log(\"Blockchain Details:\", blockchainDetails);\n\n          // native token = fetch trade data asap\n          let tradeData = null;\n          if (selectedToken.key === \"native\") {\n            console.log(\"Fetching trade data for native token\");\n            try {\n              const amountString = String(tokenAmount);\n              tradeData = await newTransaction.handleTradeDataBuySc(\n                amountString\n              );\n              console.log(\"Trade data fetched:\", tradeData);\n              setTradeDataBuySc(tradeData);\n            } catch (tradeError) {\n              console.error(\"Error fetching trade data:\", tradeError);\n            }\n          } else {\n            console.log(\"Stablecoin selected, skipping trade data fetch\");\n          }\n\n          console.log(\"Debug Information:\", {\n            tokenType: selectedToken.key,\n            isDirectTransfer: selectedToken.isDirectTransfer,\n            isNativeToken: selectedToken.isNative,\n            tradeData: tradeData,\n            receivingAddress: receivingAddress,\n            djedContractAddress: networkConfig.djedAddress,\n            blockchainDetails: blockchainDetails,\n          });\n\n          const details = {\n            network: selectedNetwork,\n            token: selectedToken.key,\n            tokenSymbol: selectedToken.symbol,\n            amount: tokenAmount,\n            receivingAddress: receivingAddress,\n            djedContractAddress: networkConfig.djedAddress,\n            isDirectTransfer: selectedToken.isDirectTransfer || false,\n            isNativeToken: selectedToken.isNative || false,\n            tradeAmount: tradeData ? tradeData.amount : null,\n            ...blockchainDetails,\n          };\n\n          setTransactionDetails(details);\n        } catch (err) {\n          console.error(\"Error initializing transaction:\", err);\n          setError(\"Failed to initialize transaction. Please try again.\");\n        } finally {\n          setLoading(false);\n        }\n      }\n    };\n\n    initializeTransaction();\n  }, [selectedNetwork, selectedToken, networkSelector, setTransactionDetails]);\n\n  const handleConnectWallet = async () => {\n    const success = await connectWallet();\n    if (success) {\n      console.log(\"Wallet connected:\", account);\n    }\n  };\n\n  if (loading) {\n    return <div className={styles.loading}>Loading transaction details...</div>;\n  }\n\n  if (error) {\n    return <div className={styles.error}>{error}</div>;\n  }\n\n  if (!selectedNetwork || !selectedToken || !contextTransactionDetails) {\n    return null;\n  }\n\n  return (\n    <div className={styles.transactionReview}>\n      {/* Network Info */}\n      <div className={styles.transactionInfo}>\n        <span className={styles.transactionLabel}>Network:</span>\n        <span className={styles.transactionValue}>\n          {contextTransactionDetails.network}\n        </span>\n      </div>\n\n      {/* You Pay */}\n      <div className={styles.transactionInfo}>\n        <span className={styles.transactionLabel}>You Pay:</span>\n        <span className={styles.transactionValue}>\n          {selectedToken.key === \"stablecoin\"\n            ? `${contextTransactionDetails.amount} ${contextTransactionDetails.tokenSymbol}`\n            : `${tradeDataBuySc ? tradeDataBuySc : \"Calculating...\"} ${\n                contextTransactionDetails.tokenSymbol\n              }`}\n        </span>\n      </div>\n\n      {/* Merchant Receives */}\n      <div className={styles.transactionInfo}>\n        <span className={styles.transactionLabel}>Merchant Receives:</span>\n        <span className={styles.transactionValue}>\n          {`${contextTransactionDetails.amount} ${\n            selectedToken.key === \"stablecoin\"\n              ? contextTransactionDetails.tokenSymbol\n              : networkSelector.getSelectedNetworkConfig().tokens.stablecoin\n                  .symbol\n          }`}\n        </span>\n      </div>\n\n      {/* Wallet Button */}\n      <button\n        className={styles.walletButton}\n        onClick={handleConnectWallet}\n        disabled={isConnecting}\n      >\n        {isConnecting ? \"Connecting...\" : \"Connect Wallet\"}\n      </button>\n    </div>\n  );\n};\n\nexport default TransactionReview;\n","import React, { useState } from \"react\";\nimport PayButton from \"./PayButton\";\nimport Dialog from \"./Dialog\";\nimport NetworkDropdown from \"./NetworkDropdown\";\nimport TokenDropdown from \"./TokenDropdown\";\nimport TransactionReview from \"./TransactionReview\";\nimport { NetworkProvider, useNetwork } from \"../contexts/NetworkContext\";\nimport { WalletProvider } from \"../contexts/WalletContext\";\nimport styles from \"../styles/PricingCard.css\";\n\nconst WidgetContent = ({ onClose, buttonSize }) => {\n  const { resetSelections } = useNetwork(); //\n\n  const handleClose = () => {\n    resetSelections();\n    onClose();\n  };\n\n  return (\n    <Dialog onClose={handleClose} size={buttonSize}>\n      <NetworkDropdown />\n      <TokenDropdown />\n      <TransactionReview />\n    </Dialog>\n  );\n};\n\nconst WidgetWithProviders = ({ onClose, buttonSize, networkSelector }) => {\n  return (\n    <NetworkProvider networkSelector={networkSelector}>\n      <WalletProvider>\n        <WidgetContent onClose={onClose} buttonSize={buttonSize} />\n      </WalletProvider>\n    </NetworkProvider>\n  );\n};\n\nexport const Widget = ({ networkSelector, buttonSize = \"medium\" }) => {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  const handleOpenDialog = () => {\n    setIsDialogOpen(true);\n  };\n\n  const handleCloseDialog = () => {\n    setIsDialogOpen(false);\n  };\n\n  return (\n    <div className={styles.widgetContainer}>\n      {!isDialogOpen && (\n        <PayButton onClick={handleOpenDialog} size={buttonSize} />\n      )}\n      {isDialogOpen && (\n        <WidgetWithProviders\n          onClose={handleCloseDialog}\n          buttonSize={buttonSize}\n          networkSelector={networkSelector}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Widget;\n","// src/index.js\nimport { NetworkSelector } from './core/NetworkSelector';\nimport { Transaction } from './core/Transaction';\nimport { MerchantConfig } from './core/MerchantConfig';\nimport Widget from './widget/Widget.jsx';\nimport PayButton from './widget/PayButton.jsx';\nimport Dialog from './widget/Dialog.jsx';\nimport NetworkDropdown from './widget/NetworkDropdown.jsx';\nimport './styles/main.css';\nimport './styles/PricingCard.css';\n\nconst StablePay = {\n  NetworkSelector,\n  Transaction,\n  MerchantConfig,\n  Widget,\n  PayButton,\n  Dialog,\n  NetworkDropdown\n};\n\nexport default StablePay;","import { networksConfig } from \"../utils/config\";\n\nexport class NetworkSelector {\n  constructor(merchantConfig) {\n    this.merchantConfig = merchantConfig;\n    this.blacklist = merchantConfig.getBlacklist();\n    this.availableNetworks = this.getAvailableNetworks();\n    this.selectedNetwork = null;\n  }\n\n  getAvailableNetworks() {\n    return Object.entries(networksConfig).reduce(\n      (acc, [networkKey, networkConfig]) => {\n        if (!this.blacklist.includes(networkConfig.chainId)) {\n          acc[networkKey] = networkConfig;\n        }\n        return acc;\n      },\n      {}\n    );\n  }\n\n  selectNetwork(networkKey) {\n    if (networkKey === null) {\n      this.selectedNetwork = null;\n      console.log(\"Network selection reset\");\n      return true;\n    }\n    if (this.availableNetworks[networkKey]) {\n      this.selectedNetwork = networkKey;\n      console.log(`Network selected: ${networkKey}`);\n      return true;\n    }\n    console.error(`Invalid network: ${networkKey}`);\n    return false;\n  }\n\n  getSelectedNetworkConfig() {\n    return this.selectedNetwork\n      ? this.availableNetworks[this.selectedNetwork]\n      : null;\n  }\n\n  getReceivingAddress() {\n    return this.merchantConfig.getReceivingAddress();\n  }\n\n  getTokenAmount(token) {\n    return this.merchantConfig.getTokenAmount(this.selectedNetwork, token);\n  }\n}\n","import { networksConfig } from \"../utils/config\";\n\nexport class MerchantConfig {\n  constructor(options = {}) {\n    this.receivingAddress = options.receivingAddress || \"\";\n    this.blacklist = options.blacklist || [];\n    this.amounts = options.Amounts || {}; // Note the capital 'A' in Amounts\n    this.validateConfig();\n  }\n\n  validateConfig() {\n    if (!this.receivingAddress) {\n      throw new Error(\"Receiving address is required\");\n    }\n    // Validate stablecoin amounts\n    for (const [network, tokens] of Object.entries(this.amounts)) {\n      if (!networksConfig[network]) {\n        throw new Error(`Invalid network: ${network}`);\n      }\n      if (\n        !tokens.stablecoin ||\n        typeof tokens.stablecoin !== \"number\" ||\n        tokens.stablecoin <= 0\n      ) {\n        throw new Error(`Invalid stablecoin amount for network ${network}`);\n      }\n    }\n  }\n\n  getBlacklist() {\n    return this.blacklist;\n  }\n\n  getReceivingAddress() {\n    return this.receivingAddress;\n  }\n\n  // getTokenAmount(network, token) {\n  //   const networkConfig = networksConfig[network];\n  //   if (!networkConfig) return 0;\n\n  //   const stablecoinSymbol = networkConfig.tokens.stablecoin.symbol;\n\n  //   if (token === 'stablecoin') {\n  //     return this.amounts[network]?.stablecoin || 0;\n  //   }\n  //   // For native tokens, return 0 as it's not specified in the new structure\n  //   return 0;\n  // }\n  getTokenAmount(network) {\n    console.log(\"Getting amount for network:\", network);\n    console.log(\"Amounts object:\", this.amounts);\n\n    // Directly return the stablecoin amount for the network\n    const amount = this.amounts[network]?.stablecoin;\n    console.log(\"Returning amount:\", amount);\n\n    return amount || 0;\n  }\n}\n\nexport default MerchantConfig;\n"],"names":["networksConfig","sepolia","uri","chainId","djedAddress","tokens","stablecoin","symbol","address","decimals","isDirectTransfer","native","isNative","feeUI","Transaction","constructor","networkUri","this","init","Error","web3","getWeb3","djedContract","getDjedContract","stableCoin","reserveCoin","getCoinContracts","scDecimals","rcDecimals","getDecimals","oracleContract","getOracleAddress","then","addr","getOracleContract","_address","oracleAddress","console","log","error","getBlockchainDetails","web3Available","djedContractAvailable","stableCoinAddress","reserveCoinAddress","stableCoinDecimals","reserveCoinDecimals","oracleContractAvailable","handleTradeDataBuySc","amountScaled","tradeDataPriceBuySc","totalBCScaled","PayButton","onClick","size","sizeStyles","small","width","height","fontSize","medium","large","logoSizes","buttonStyle","logoStyle","React","createElement","className","styles","style","Dialog","children","onClose","dialogOverlay","pricingCard","dialogClose","pricingCardHeader","allianceLogo","stablepayTitle","pricingCardBody","TokenSelector","networkSelector","selectedToken","selectToken","tokenKey","networkConfig","getSelectedNetworkConfig","key","getSelectedToken","getAvailableTokens","Object","entries","map","config","resetSelection","NetworkContext","createContext","NetworkProvider","tokenSelector","useState","selectedNetwork","setSelectedNetwork","setSelectedToken","transactionDetails","setTransactionDetails","resetState","useEffect","Provider","value","selectNetwork","networkKey","token","resetSelections","useNetwork","context","useContext","undefined","NetworkDropdown","selectField","htmlFor","id","onChange","event","target","disabled","keys","availableNetworks","TokenDropdown","loading","setLoading","setError","availableTokens","async","newValue","transaction","tokenAmount","getTokenAmount","blockchainDetails","tradeData","String","network","tokenSymbol","amount","receivingAddress","getReceivingAddress","djedContractAddress","isNativeToken","tradeAmount","err","WalletContext","WalletProvider","walletClient","setWalletClient","account","setAccount","setChainId","isConnecting","setIsConnecting","networkError","setNetworkError","getChainConfig","mainnet","checkNetwork","expectedChainId","getExpectedChainId","currentChainId","errorMsg","getNetworkName","connectWallet","useCallback","window","ethereum","accounts","request","method","chainIdHex","parseInt","chain","client","createWalletClient","transport","custom","on","handleAccountsChanged","handleChainChanged","message","newChainId","disconnectWallet","removeListener","length","TransactionReview","contextTransactionDetails","walletError","useWallet","setTransaction","tradeDataBuySc","setTradeDataBuySc","newTransaction","amountString","tradeError","tokenType","details","initializeTransaction","transactionReview","transactionInfo","transactionLabel","transactionValue","walletButton","WidgetContent","buttonSize","handleClose","WidgetWithProviders","NetworkSelector","merchantConfig","blacklist","getBlacklist","getAvailableNetworks","reduce","acc","includes","MerchantConfig","options","amounts","Amounts","validateConfig","Widget","isDialogOpen","setIsDialogOpen","widgetContainer","handleOpenDialog","handleCloseDialog"],"mappings":"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"}