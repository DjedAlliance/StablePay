{"version":3,"file":"index.js","sources":["../../src/utils/config.js","../../src/core/Transaction.js","../../src/widget/PayButton.jsx","../../src/widget/Dialog.jsx","../../src/core/TokenSelector.js","../../src/contexts/NetworkContext.jsx","../../src/widget/NetworkDropdown.jsx","../../src/widget/TokenDropdown.jsx","../../src/contexts/chains.js","../../src/contexts/WalletContext.jsx","../../src/widget/TransactionReview.jsx","../../src/widget/Widget.jsx","../../src/index.js","../../src/core/NetworkSelector.js","../../src/core/MerchantConfig.js"],"sourcesContent":["// src/utils/config.js\nexport const networksConfig = {\n  'sepolia': {\n    uri: 'https://ethereum-sepolia.publicnode.com/',\n    chainId: 11155111,\n    djedAddress: '0x624FcD0a1F9B5820c950FefD48087531d38387f4',\n    tokens: {\n      stablecoin: {\n        symbol: 'SOD',\n        address: '0x6b930182787F346F18666D167e8d32166dC5eFBD',\n        decimals: 18,\n        isDirectTransfer: true\n      },\n      native: {\n        symbol: 'ETH',\n        decimals: 18,\n        isNative: true\n      }\n    },\n    feeUI: 0\n  },\n  'milkomeda-mainnet': {\n    uri: 'https://rpc-mainnet-cardano-evm.c1.milkomeda.com',\n    chainId: 2001,\n    djedAddress: '0x67A30B399F5Ed499C1a6Bc0358FA6e42Ea4BCe76',\n    tokens: {\n      stablecoin: {\n        symbol: 'MOD',\n        address: '0xcbA90fB1003b9D1bc6a2b66257D2585011b004e9',\n        decimals: 18,\n        isDirectTransfer: true\n      },\n      native: {\n        symbol: 'mADA',\n        decimals: 18,\n        isNative: true\n      }\n    },\n    feeUI: 0\n  },\n  'ethereum-classic': {  //Mordor Testnet details\n    uri: 'https://rpc.mordor.etccooperative.org',  // Mordor RPC\n    chainId: 63,  \n    djedAddress: '0xD4548F4b6d08852B56cdabC6be7Fd90953179d68',  //Mordor DJED contract\n    tokens: {\n      stablecoin: {\n        symbol: 'ECSD',\n        address: '0xffD4505B3452Dc22f8473616d50503bA9E1710Ac',  //  Mordor Stablecoin\n        decimals: 18,\n        isDirectTransfer: true\n      },\n      native: {\n        symbol: 'ETC',\n        decimals: 18,\n        isNative: true\n      }\n    },\n    feeUI: 0\n  }\n};","import { getWeb3, getDjedContract, getCoinContracts, getDecimals, getOracleAddress, getOracleContract, tradeDataPriceBuySc, buyScTx } from 'djed-sdk';\n\nexport class Transaction {\n  constructor(networkUri, djedAddress) {\n    this.networkUri = networkUri;\n    this.djedAddress = djedAddress;\n  }\n\n  async init() {\n    if (!this.networkUri || !this.djedAddress) {\n      throw new Error('Network URI and DJED address are required');\n    }\n\n    try {\n      this.web3 = await getWeb3(this.networkUri);\n      this.djedContract = getDjedContract(this.web3, this.djedAddress);\n      const { stableCoin, reserveCoin } = await getCoinContracts(this.djedContract, this.web3);\n      const { scDecimals, rcDecimals } = await getDecimals(stableCoin, reserveCoin);\n      this.stableCoin = stableCoin;\n      this.reserveCoin = reserveCoin;\n      this.scDecimals = scDecimals;\n      this.rcDecimals = rcDecimals;\n\n      // Get the oracle contract\n      this.oracleContract = await getOracleAddress(this.djedContract).then((addr) =>\n        getOracleContract(this.web3, addr, this.djedContract._address)\n      );\n\n      this.oracleAddress = this.oracleContract._address;\n\n      console.log('Transaction initialized successfully');\n    } catch (error) {\n      console.error('Error initializing transaction:', error);\n      throw error;\n    }\n  }\n\n  getBlockchainDetails() {\n    return {\n      web3Available: !!this.web3,\n      djedContractAvailable: !!this.djedContract,\n      stableCoinAddress: this.stableCoin ? this.stableCoin._address : 'N/A',\n      reserveCoinAddress: this.reserveCoin ? this.reserveCoin._address : 'N/A',\n      stableCoinDecimals: this.scDecimals,\n      reserveCoinDecimals: this.rcDecimals,\n      oracleAddress: this.oracleAddress || 'N/A',\n      oracleContractAvailable: !!this.oracleContract,\n    };\n  }\n\n  async handleTradeDataBuySc(amountScaled) {\n    if (!this.djedContract) {\n      throw new Error(\"DJED contract is not initialized\");\n    }\n    if (typeof amountScaled !== 'string') {\n      throw new Error(\"Amount must be a string\");\n    }\n    try {\n      const result = await tradeDataPriceBuySc(this.djedContract, this.scDecimals, amountScaled);\n      return result.totalBCScaled; //converted ETH equivalent\n    } catch (error) {\n      console.error(\"Error fetching trade data for buying stablecoins: \", error);\n      throw error;\n    }\n  }\n\n  // use buyScTx directly\n  async buyStablecoins(payer, receiver, value) {\n    if (!this.djedContract) {\n      throw new Error(\"DJED contract is not initialized\");\n    }\n    try {\n      console.log(`Building stablecoin purchase transaction from ${payer} to ${receiver} with value ${value}`);\n\n      //Hardcoded UI address\n      const UI = '0x0232556C83791b8291E9b23BfEa7d67405Bd9839';\n\n      //buyScTx from djed-sdk\n      const txData = await buyScTx(this.djedContract, payer, receiver, value, UI, this.djedAddress);\n\n      console.log(\"Transaction built:\", txData);\n      return txData;\n    } catch (error) {\n      console.error(\"Error executing buyStablecoins transaction: \", error);\n      throw error;\n    }\n  }\n}\n","import React from \"react\";\nimport styles from \"../styles/main.css\";\n\nconst PayButton = ({ onClick, size = \"medium\" }) => {\n  const sizeStyles = {\n    small: { width: \"200px\", height: \"50px\", fontSize: \"14px\" },\n    medium: { width: \"250px\", height: \"60px\", fontSize: \"16px\" },\n    large: { width: \"300px\", height: \"70px\", fontSize: \"18px\" },\n  };\n\n  const logoSizes = {\n    small: { width: \"35px\", height: \"33px\" },\n    medium: { width: \"40px\", height: \"38px\" },\n    large: { width: \"45px\", height: \"43px\" },\n  };\n\n  const buttonStyle = sizeStyles[size] || sizeStyles.medium;\n  const logoStyle = logoSizes[size] || logoSizes.medium;\n\n  return (\n    <button\n      className={styles.stablePayButton}\n      onClick={onClick}\n      style={buttonStyle}\n    >\n      <div className={styles.logo} style={logoStyle} />\n      <span className={styles.buttonText}>Pay with StablePay</span>\n    </button>\n  );\n};\n\nexport default PayButton;\n","import React from 'react';\nimport styles from '../styles/PricingCard.css';\n\n\nconst Dialog = ({ children, onClose, size = 'medium' }) => {\n  return (\n    <div className={styles.dialogOverlay}>\n      <div className={`${styles.pricingCard} ${styles[size]}`}>\n        <button className={styles.dialogClose} onClick={onClose}>×</button>\n        <div className={styles.pricingCardHeader}>\n        <div className={styles.allianceLogo}></div>\n\n          <h2 className={styles.stablepayTitle}>StablePay</h2>\n        </div>\n        <div className={styles.pricingCardBody}>\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Dialog;","// TokenSelector.js\n\nexport class TokenSelector {\n  constructor(networkSelector) {\n    this.networkSelector = networkSelector;\n    this.selectedToken = null;\n  }\n\n  selectToken(tokenKey) {\n    const networkConfig = this.networkSelector.getSelectedNetworkConfig();\n    if (networkConfig && networkConfig.tokens[tokenKey]) {\n      this.selectedToken = {\n        key: tokenKey,\n        ...networkConfig.tokens[tokenKey]\n      };\n      return true;\n    }\n    return false;\n  }\n\n  getSelectedToken() {\n    return this.selectedToken;\n  }\n\n  getAvailableTokens() {\n    const networkConfig = this.networkSelector.getSelectedNetworkConfig();\n    if (!networkConfig) return [];\n\n    return Object.entries(networkConfig.tokens).map(([key, config]) => ({\n      key,\n      ...config\n    }));\n  }\n\n  resetSelection() {\n    this.selectedToken = null;\n  }\n}","import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { TokenSelector } from '../core/TokenSelector';\n\nconst NetworkContext = createContext();\n\nexport const NetworkProvider = ({ children, networkSelector }) => {\n  const [tokenSelector] = useState(() => new TokenSelector(networkSelector));\n  const [selectedNetwork, setSelectedNetwork] = useState(null);\n  const [selectedToken, setSelectedToken] = useState(null);\n  const [transactionDetails, setTransactionDetails] = useState(null);\n\n  const resetState = () => {\n    setSelectedToken(null);\n    setTransactionDetails(null);\n  };\n\n  const selectNetwork = (networkKey) => {\n    if (networkSelector.selectNetwork(networkKey)) {\n      setSelectedNetwork(networkKey);\n      resetState(); \n      return true;\n    }\n    return false;\n  };\n\n  const selectToken = (tokenKey) => {\n    if (tokenSelector.selectToken(tokenKey)) {\n      const token = tokenSelector.getSelectedToken();\n      setSelectedToken(token);\n      return true;\n    }\n    return false;\n  };\n\n  const resetSelections = () => {\n    networkSelector.selectNetwork(null);\n    setSelectedNetwork(null);\n    resetState();\n  };\n\n  // Synchronize context state with NetworkSelector\n  useEffect(() => {\n    setSelectedNetwork(networkSelector.selectedNetwork);\n  }, [networkSelector.selectedNetwork]);\n\n  return (\n    <NetworkContext.Provider value={{ \n      networkSelector,\n      tokenSelector,\n      selectedNetwork,\n      selectedToken,\n      transactionDetails,\n      setTransactionDetails,\n      selectNetwork,\n      selectToken,\n      resetSelections\n    }}>\n      {children}\n    </NetworkContext.Provider>\n  );\n};\n\nexport const useNetwork = () => {\n  const context = useContext(NetworkContext);\n  if (context === undefined) {\n    throw new Error('useNetwork must be used within a NetworkProvider');\n  }\n  return context;\n};\n\nexport default NetworkContext;","import React from 'react';\nimport { useNetwork } from '../contexts/NetworkContext';\nimport styles from '../styles/PricingCard.css';\n\nconst NetworkDropdown = () => {\n  const { networkSelector, selectedNetwork, selectNetwork } = useNetwork();\n\n  const handleNetworkChange = (event) => {\n    selectNetwork(event.target.value);\n  };\n\n  return (\n    <div className={styles.selectField}>\n      <label htmlFor=\"network-select\">Select Network</label>\n      <select \n        id=\"network-select\"\n        onChange={handleNetworkChange} \n        value={selectedNetwork || \"\"}\n      >\n        <option value=\"\" disabled>Select a network</option>\n        {Object.keys(networkSelector.availableNetworks).map((networkKey) => (\n          <option key={networkKey} value={networkKey}>{networkKey}</option>\n        ))}\n      </select>\n    </div>\n  );\n};\n\nexport default NetworkDropdown;","import React, { useState } from \"react\";\nimport { useNetwork } from \"../contexts/NetworkContext\";\nimport { Transaction } from \"../core/Transaction\";\nimport styles from \"../styles/PricingCard.css\";\n\nconst TokenDropdown = () => {\n  const {\n    networkSelector,\n    tokenSelector,\n    selectedNetwork,\n    selectedToken,\n    selectToken,\n    setTransactionDetails,\n  } = useNetwork();\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const handleTokenChange = async (event) => {\n    const newValue = event.target.value;\n    setError(null);\n    setLoading(true);\n\n    try {\n      if (selectToken(newValue)) {\n        const networkConfig = networkSelector.getSelectedNetworkConfig();\n        const transaction = new Transaction(\n          networkConfig.uri,\n          networkConfig.djedAddress\n        );\n        await transaction.init();\n\n        const tokenAmount = networkSelector.getTokenAmount(newValue);\n        const blockchainDetails = transaction.getBlockchainDetails();\n\n        let tradeData = null;\n        if (newValue === \"native\") {\n          tradeData = await transaction.handleTradeDataBuySc(\n            String(tokenAmount)\n          );\n        }\n\n        setTransactionDetails({\n          network: selectedNetwork,\n          token: newValue,\n          tokenSymbol: tokenSelector.getSelectedToken().symbol,\n          amount: tokenAmount,\n          receivingAddress: networkSelector.getReceivingAddress(),\n          djedContractAddress: networkConfig.djedAddress,\n          isDirectTransfer:\n            tokenSelector.getSelectedToken().isDirectTransfer || false,\n          isNativeToken: tokenSelector.getSelectedToken().isNative || false,\n          tradeAmount: tradeData ? tradeData.amount : null,\n          ...blockchainDetails,\n        });\n      }\n    } catch (err) {\n      console.error(\"Error fetching transaction details:\", err);\n      setError(\"Failed to fetch transaction details. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const availableTokens = selectedNetwork\n    ? tokenSelector.getAvailableTokens()\n    : [];\n\n  return (\n    <div className={styles.selectField}>\n      <label htmlFor=\"token-select\">Select Token</label>\n      <select\n        id=\"token-select\"\n        onChange={handleTokenChange}\n        value={selectedToken ? selectedToken.key : \"\"}\n        disabled={!selectedNetwork || loading}\n      >\n        <option value=\"\" disabled>\n          {selectedNetwork\n            ? loading\n              ? \"Loading...\"\n              : \"Select a token\"\n            : \"Please select a network first\"}\n        </option>\n        {availableTokens.map((token) => (\n          <option key={token.key} value={token.key}>\n            {token.symbol} (\n            {token.isDirectTransfer ? \"Direct Transfer\" : \"Native\"})\n          </option>\n        ))}\n      </select>\n      {error && <div className={styles.error}>{error}</div>}\n    </div>\n  );\n};\n\nexport default TokenDropdown;\n","import { defineChain } from 'viem';\n\nexport const mordor = defineChain({\n  id: 63,\n  name: 'Mordor Testnet',\n  network: 'mordor',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'Mordor Ether',\n    symbol: 'METC',\n  },\n  rpcUrls: {\n    default: {\n      http: ['https://rpc.mordor.etccooperative.org'],\n      webSocket: ['wss://rpc.mordor.etccooperative.org/ws'],\n    },\n  },\n  blockExplorers: {\n    default: { name: 'BlockScout', url: 'https://blockscout.com/etc/mordor' },\n  },\n  testnet: true,\n});\n","import React, { createContext, useContext, useState, useCallback, useEffect } from 'react';\nimport { createWalletClient, createPublicClient, custom, http } from 'viem';\nimport { mordor } from './chains';\n\nconst WalletContext = createContext(null);\n\nexport const useWallet = () => {\n  const context = useContext(WalletContext);\n  if (!context) {\n    throw new Error('useWallet must be used within a WalletProvider');\n  }\n  return context;\n};\n\nexport const WalletProvider = ({ children }) => {\n  const [walletClient, setWalletClient] = useState(null);\n  const [publicClient, setPublicClient] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [chainId, setChainId] = useState(null);\n  const [balance, setBalance] = useState(null);\n  const [error, setError] = useState(null);\n  const [isConnecting, setIsConnecting] = useState(false);\n\n  const expectedChainId = mordor.id; // Use Mordor Testnet\n\n  const connectWallet = useCallback(async () => {\n    if (!window.ethereum) {\n      setError('Please install MetaMask or another Web3 wallet');\n      return false;\n    }\n\n    setIsConnecting(true);\n    setError(null);\n\n    try {\n      const walletClient = createWalletClient({\n        chain: mordor,\n        transport: custom(window.ethereum),\n      });\n\n      const addresses = await walletClient.getAddresses();\n      if (addresses.length === 0) {\n        throw new Error('No wallet address found.');\n      }\n\n      const chainIdHex = await window.ethereum.request({ method: 'eth_chainId' });\n      const currentChainId = parseInt(chainIdHex, 16);\n\n      if (currentChainId !== expectedChainId) {\n        throw new Error(`Wrong network detected. Please switch to Mordor Testnet`);\n      }\n\n      setWalletClient(walletClient);\n      setAccount(addresses[0]);\n      setChainId(currentChainId);\n\n      const publicClient = createPublicClient({ chain: mordor, transport: http() });\n      const balance = await publicClient.getBalance({ address: addresses[0] });\n      setBalance(parseFloat(balance) / Math.pow(10, 18));\n\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\n      window.ethereum.on('chainChanged', handleChainChanged);\n\n      return true;\n    } catch (err) {\n      console.error('Error connecting wallet:', err);\n      setError(err.message);\n      return false;\n    } finally {\n      setIsConnecting(false);\n    }\n  }, []);\n\n  const connectPublicClient = useCallback(() => {\n    setPublicClient(createPublicClient({ chain: mordor, transport: http() }));\n  }, []);\n\n  const handleChainChanged = async (chainIdHex) => {\n    const newChainId = parseInt(chainIdHex, 16);\n    setChainId(newChainId);\n\n    if (newChainId !== expectedChainId) {\n      setError(`Wrong network detected. Please switch to Mordor Testnet`);\n      return;\n    }\n\n    if (window.ethereum) {\n      const walletClient = createWalletClient({ chain: mordor, transport: custom(window.ethereum) });\n      setWalletClient(walletClient);\n    }\n  };\n\n  const handleAccountsChanged = async (accounts) => {\n    if (accounts.length === 0) {\n      disconnectWallet();\n    } else {\n      setAccount(accounts[0]);\n\n      const publicClient = createPublicClient({ chain: mordor, transport: http() });\n      const balance = await publicClient.getBalance({ address: accounts[0] });\n      setBalance(parseFloat(balance) / Math.pow(10, 18));\n    }\n  };\n\n  const disconnectWallet = useCallback(() => {\n    setWalletClient(null);\n    setAccount(null);\n    setChainId(null);\n    setBalance(null);\n\n    if (window.ethereum) {\n      window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n      window.ethereum.removeListener('chainChanged', handleChainChanged);\n    }\n  }, []);\n\n  useEffect(() => {\n    connectPublicClient();\n  }, [connectPublicClient]);\n\n  return (\n    <WalletContext.Provider\n      value={{\n        walletClient,\n        publicClient,\n        account,\n        chainId,\n        balance,\n        error,\n        isConnecting,\n        connectWallet,\n        disconnectWallet,\n      }}\n    >\n      {children}\n    </WalletContext.Provider>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { useNetwork } from \"../contexts/NetworkContext\";\nimport { useWallet } from \"../contexts/WalletContext\";\nimport { Transaction } from \"../core/Transaction\";\nimport { parseEther, encodeFunctionData, parseUnits } from \"viem\"; \nimport styles from \"../styles/PricingCard.css\";\n\nconst STABLECOIN_CONTRACT_ADDRESS = \"0xdc86935A9597aA3A9008d2f26232233043091284\"; \n\nconst TransactionReview = () => {\n  const {\n    networkSelector,\n    selectedNetwork,\n    selectedToken,\n    transactionDetails: contextTransactionDetails,\n    setTransactionDetails,\n  } = useNetwork();\n\n  const {\n    connectWallet,\n    account,\n    walletClient,\n    publicClient,\n    isConnecting,\n  } = useWallet();\n\n  const [transaction, setTransaction] = useState(null);\n  const [tradeDataBuySc, setTradeDataBuySc] = useState(null);\n  const [txData, setTxData] = useState(null);\n  const [message, setMessage] = useState(\"\");\n  const [txHash, setTxHash] = useState(null);\n\n  useEffect(() => {\n    const initializeTransaction = async () => {\n      if (!selectedNetwork || !selectedToken) return;\n\n      try {\n        const networkConfig = networkSelector.getSelectedNetworkConfig();\n        const receivingAddress = networkSelector.getReceivingAddress();\n        const tokenAmount = networkSelector.getTokenAmount(selectedToken.key);\n\n        const newTransaction = new Transaction(\n          networkConfig.uri,\n          networkConfig.djedAddress\n        );\n        await newTransaction.init();\n        setTransaction(newTransaction);\n\n        let tradeData = null;\n        if (selectedToken.key === \"native\") {\n          try {\n            tradeData = await newTransaction.handleTradeDataBuySc(String(tokenAmount));\n            setTradeDataBuySc(tradeData);\n          } catch (tradeError) {\n            console.error(\"Error fetching trade data:\", tradeError);\n          }\n        }\n\n        setTransactionDetails({\n          network: selectedNetwork,\n          token: selectedToken.key,\n          tokenSymbol: selectedToken.symbol,\n          amount: tokenAmount || \"0\",\n          receivingAddress,\n          djedContractAddress: networkConfig.djedAddress,\n          isDirectTransfer: selectedToken.isDirectTransfer || false,\n          isNativeToken: selectedToken.isNative || false,\n          tradeAmount: tradeData ? tradeData.amount : null,\n          ...newTransaction.getBlockchainDetails(),\n        });\n      } catch (err) {\n        console.error(\"Error initializing transaction:\", err);\n      }\n    };\n\n    initializeTransaction();\n  }, [selectedNetwork, selectedToken, networkSelector, setTransactionDetails]);\n\n  if (!contextTransactionDetails) {\n    return <div className={styles.loading}>Initializing transaction...</div>;\n  }\n\n  const handleConnectWallet = async () => {\n    const success = await connectWallet();\n    if (success) {\n      console.log(\"Wallet connected:\", account);\n    }\n  };\n\n  const handleSendTransaction = async () => {\n    if (!account || !contextTransactionDetails || !transaction) {\n      setMessage(\"❌ Wallet not connected or transaction details missing\");\n      return;\n    }\n\n    try {\n      setMessage(\"⏳ Preparing transaction...\");\n\n      const receiver = contextTransactionDetails.receivingAddress;\n      let builtTx;\n\n      if (selectedToken.key === \"native\") {\n        const UI = \"0x0232556C83791b8291E9b23BfEa7d67405Bd9839\";\n        const amountToSend = tradeDataBuySc || \"0\";\n\n        builtTx = await transaction.buyStablecoins(\n          account,\n          receiver,\n          parseEther(String(amountToSend)),\n          UI\n        );\n      } else {\n        const amountToSend = contextTransactionDetails.amount\n          ? parseUnits(\n              String(contextTransactionDetails.amount),\n              contextTransactionDetails.stableCoinDecimals\n            )\n          : \"0\";\n\n        builtTx = {\n          to: STABLECOIN_CONTRACT_ADDRESS,\n          data: encodeFunctionData({\n            abi: [\n              {\n                inputs: [\n                  { internalType: \"address\", name: \"to\", type: \"address\" },\n                  { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n                ],\n                name: \"transfer\",\n                outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n                stateMutability: \"nonpayable\",\n                type: \"function\",\n              },\n            ],\n            functionName: \"transfer\",\n            args: [receiver, amountToSend],\n          }),\n          account: account,\n        };\n      }\n\n      setTxData(builtTx);\n      setMessage(\"✅ Transaction ready! Click 'Send Transaction' to proceed.\");\n    } catch (error) {\n      setMessage(`❌ Transaction preparation failed: ${error.message}`);\n    }\n  };\n\n  const handleBuySc = async () => {\n    try {\n      if (!walletClient || !account || !txData) {\n        setMessage(\"❌ Wallet client, account, or transaction data is missing\");\n        return;\n      }\n\n      setMessage(\"⏳ Sending transaction...\");\n\n      const txHash = await walletClient.sendTransaction({\n        ...txData,\n        account: account,\n      });\n\n      setTxHash(txHash);\n      setMessage(`✅ Transaction sent!`);\n    } catch (error) {\n      setMessage(`❌ Transaction failed: ${error.message}`);\n    }\n  };\n\n  const getExplorerUrl = () => {\n    if (!txHash || !selectedNetwork) return null;\n\n    const explorerBaseUrls = {\n      \"ethereum-classic\": \"https://etc-mordor.blockscout.com/tx/\",\n      \"sepolia\": \"https://sepolia.etherscan.io/tx/\",\n      \"milkomeda-mainnet\": \"https://explorer-mainnet-cardano-evm.c1.milkomeda.com/tx/\",\n    };\n\n    return explorerBaseUrls[selectedNetwork]\n      ? `${explorerBaseUrls[selectedNetwork]}${txHash}`\n      : null;\n  };\n\n  return (\n    <div className={styles.transactionReview}>\n      <div className={styles.transactionInfo}>\n        <span className={styles.transactionLabel}>Network:</span>\n        <span className={styles.transactionValue}>{contextTransactionDetails.network}</span>\n      </div>\n\n      <div className={styles.transactionInfo}>\n        <span className={styles.transactionLabel}>You Pay:</span>\n        <span className={styles.transactionValue}>\n          {selectedToken.key === \"stablecoin\"\n            ? `${contextTransactionDetails.amount} ${contextTransactionDetails.tokenSymbol}`\n            : `${tradeDataBuySc ? tradeDataBuySc : \"Calculating...\"} ${\n                contextTransactionDetails.tokenSymbol\n              }`}\n        </span>\n      </div>\n\n      <button className={styles.walletButton} onClick={handleConnectWallet} disabled={isConnecting}>\n        {isConnecting ? \"Connecting...\" : \"Connect Wallet\"}\n      </button>\n\n      {account && !txData && (\n        <button className={styles.walletButton} onClick={handleSendTransaction}>\n          Prepare Transaction\n        </button>\n      )}\n      {account && txData && (\n  <button \n    className={styles.walletButton} \n    onClick={handleBuySc} \n    disabled={txHash !== null} // Disable the button when txHash is set\n  >\n    Send Transaction\n  </button>\n)}\n\n\n      {message && <div className=\"message-box\">{message}</div>}\n\n      \n      {txHash && (\n  <div className={styles.transactionLink}>\n    ✅ Transaction Hash:{\" \"}\n    <a\n      href={`https://blockscout.com/etc/mordor/tx/${txHash}`}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      className={styles.explorerLink}\n      style={{ \n        color: \"#007bff\", \n        textDecoration: \"underline\", \n        fontWeight: \"bold\", \n        cursor: \"pointer\",\n        wordBreak: \"break-word\" \n      }}\n    >\n      {txHash.slice(0, 6)}...{txHash.slice(-6)}\n    </a>\n  </div>\n)}\n\n    </div>\n  );\n};\n\nexport default TransactionReview;\n","import React, { useState } from \"react\";\nimport PayButton from \"./PayButton\";\nimport Dialog from \"./Dialog\";\nimport NetworkDropdown from \"./NetworkDropdown\";\nimport TokenDropdown from \"./TokenDropdown\";\nimport TransactionReview from \"./TransactionReview\";\nimport { NetworkProvider, useNetwork } from \"../contexts/NetworkContext\";\nimport { WalletProvider } from \"../contexts/WalletContext\";\nimport styles from \"../styles/PricingCard.css\";\n\nconst WidgetContent = ({ onClose, buttonSize }) => {\n  const { resetSelections } = useNetwork(); \n\n  const handleClose = () => {\n    resetSelections(); // Reset selections when closing the widget\n    onClose();\n  };\n\n  return (\n    <Dialog onClose={handleClose} size={buttonSize}>\n      <NetworkDropdown />\n      <TokenDropdown />\n      <TransactionReview />\n    </Dialog>\n  );\n};\n\nconst WidgetWithProviders = ({ onClose, buttonSize, networkSelector }) => {\n  return (\n    <NetworkProvider networkSelector={networkSelector}>\n      <WalletProvider> \n        <WidgetContent onClose={onClose} buttonSize={buttonSize} />\n      </WalletProvider>\n    </NetworkProvider>\n  );\n};\n\nexport const Widget = ({ networkSelector, buttonSize = \"medium\" }) => {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  const handleOpenDialog = () => {\n    setIsDialogOpen(true);\n  };\n\n  const handleCloseDialog = () => {\n    setIsDialogOpen(false);\n  };\n\n  return (\n    <div className={styles.widgetContainer}>\n      {!isDialogOpen && (\n        <PayButton onClick={handleOpenDialog} size={buttonSize} />\n      )}\n      {isDialogOpen && (\n        <WidgetWithProviders\n          onClose={handleCloseDialog}\n          buttonSize={buttonSize}\n          networkSelector={networkSelector}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Widget;\n","// src/index.js\nimport { NetworkSelector } from './core/NetworkSelector';\nimport { Transaction } from './core/Transaction';\nimport { MerchantConfig } from './core/MerchantConfig';\nimport Widget from './widget/Widget.jsx';\nimport PayButton from './widget/PayButton.jsx';\nimport Dialog from './widget/Dialog.jsx';\nimport NetworkDropdown from './widget/NetworkDropdown.jsx';\nimport './styles/main.css';\nimport './styles/PricingCard.css';\n\nconst StablePay = {\n  NetworkSelector,\n  Transaction,\n  MerchantConfig,\n  Widget,\n  PayButton,\n  Dialog,\n  NetworkDropdown\n};\n\nexport default StablePay;","import { networksConfig } from \"../utils/config\";\n\nexport class NetworkSelector {\n  constructor(merchantConfig) {\n    this.merchantConfig = merchantConfig;\n    this.blacklist = merchantConfig.getBlacklist();\n    this.availableNetworks = this.getAvailableNetworks();\n    this.selectedNetwork = null;\n  }\n\n  getAvailableNetworks() {\n    return Object.entries(networksConfig).reduce(\n      (acc, [networkKey, networkConfig]) => {\n        if (!this.blacklist.includes(networkConfig.chainId)) {\n          acc[networkKey] = networkConfig;\n        }\n        return acc;\n      },\n      {}\n    );\n  }\n\n  selectNetwork(networkKey) {\n    if (networkKey === null) {\n      this.selectedNetwork = null;\n      console.log(\"Network selection reset\");\n      return true;\n    }\n    if (this.availableNetworks[networkKey]) {\n      this.selectedNetwork = networkKey;\n      console.log(`Network selected: ${networkKey}`);\n      return true;\n    }\n    console.error(`Invalid network: ${networkKey}`);\n    return false;\n  }\n\n  getSelectedNetworkConfig() {\n    return this.selectedNetwork\n      ? this.availableNetworks[this.selectedNetwork]\n      : null;\n  }\n\n  getReceivingAddress() {\n    return this.merchantConfig.getReceivingAddress();\n  }\n\n  getTokenAmount(token) {\n    return this.merchantConfig.getTokenAmount(this.selectedNetwork, token);\n  }\n}\n","import { networksConfig } from \"../utils/config\";\n\nexport class MerchantConfig {\n  constructor(options = {}) {\n    this.receivingAddress = options.receivingAddress || \"\";\n    this.blacklist = options.blacklist || [];\n    this.amounts = options.Amounts || {}; // Note the capital 'A' in Amounts\n    this.validateConfig();\n  }\n\n  validateConfig() {\n    if (!this.receivingAddress) {\n      throw new Error(\"Receiving address is required\");\n    }\n    // Validate stablecoin amounts\n    for (const [network, tokens] of Object.entries(this.amounts)) {\n      if (!networksConfig[network]) {\n        throw new Error(`Invalid network: ${network}`);\n      }\n      if (\n        !tokens.stablecoin ||\n        typeof tokens.stablecoin !== \"number\" ||\n        tokens.stablecoin <= 0\n      ) {\n        throw new Error(`Invalid stablecoin amount for network ${network}`);\n      }\n    }\n  }\n\n  getBlacklist() {\n    return this.blacklist;\n  }\n\n  getReceivingAddress() {\n    return this.receivingAddress;\n  }\n\n  // getTokenAmount(network, token) {\n  //   const networkConfig = networksConfig[network];\n  //   if (!networkConfig) return 0;\n\n  //   const stablecoinSymbol = networkConfig.tokens.stablecoin.symbol;\n\n  //   if (token === 'stablecoin') {\n  //     return this.amounts[network]?.stablecoin || 0;\n  //   }\n  //   // For native tokens, return 0 as it's not specified in the new structure\n  //   return 0;\n  // }\n  getTokenAmount(network) {\n    console.log(\"Getting amount for network:\", network);\n    console.log(\"Amounts object:\", this.amounts);\n\n    // Directly return the stablecoin amount for the network\n    const amount = this.amounts[network]?.stablecoin;\n    console.log(\"Returning amount:\", amount);\n\n    return amount || 0;\n  }\n}\n\nexport default MerchantConfig;\n"],"names":["networksConfig","sepolia","uri","chainId","djedAddress","tokens","stablecoin","symbol","address","decimals","isDirectTransfer","native","isNative","feeUI","Transaction","constructor","networkUri","this","init","Error","web3","getWeb3","djedContract","getDjedContract","stableCoin","reserveCoin","getCoinContracts","scDecimals","rcDecimals","getDecimals","oracleContract","getOracleAddress","then","addr","getOracleContract","_address","oracleAddress","console","log","error","getBlockchainDetails","web3Available","djedContractAvailable","stableCoinAddress","reserveCoinAddress","stableCoinDecimals","reserveCoinDecimals","oracleContractAvailable","handleTradeDataBuySc","amountScaled","tradeDataPriceBuySc","totalBCScaled","buyStablecoins","payer","receiver","value","UI","txData","buyScTx","PayButton","onClick","size","sizeStyles","small","width","height","fontSize","medium","large","logoSizes","buttonStyle","logoStyle","React","createElement","className","styles","style","Dialog","children","onClose","dialogOverlay","pricingCard","dialogClose","pricingCardHeader","allianceLogo","stablepayTitle","pricingCardBody","TokenSelector","networkSelector","selectedToken","selectToken","tokenKey","networkConfig","getSelectedNetworkConfig","key","getSelectedToken","getAvailableTokens","Object","entries","map","config","resetSelection","NetworkContext","createContext","NetworkProvider","tokenSelector","useState","selectedNetwork","setSelectedNetwork","setSelectedToken","transactionDetails","setTransactionDetails","resetState","useEffect","Provider","selectNetwork","networkKey","token","resetSelections","useNetwork","context","useContext","undefined","NetworkDropdown","selectField","htmlFor","id","onChange","event","target","disabled","keys","availableNetworks","TokenDropdown","loading","setLoading","setError","availableTokens","async","newValue","transaction","tokenAmount","getTokenAmount","blockchainDetails","tradeData","String","network","tokenSymbol","amount","receivingAddress","getReceivingAddress","djedContractAddress","isNativeToken","tradeAmount","err","mordor","defineChain","name","nativeCurrency","rpcUrls","default","http","webSocket","blockExplorers","url","testnet","WalletContext","WalletProvider","walletClient","setWalletClient","publicClient","setPublicClient","account","setAccount","setChainId","balance","setBalance","isConnecting","setIsConnecting","expectedChainId","connectWallet","useCallback","window","ethereum","createWalletClient","chain","transport","custom","addresses","getAddresses","length","chainIdHex","request","method","currentChainId","parseInt","createPublicClient","getBalance","parseFloat","Math","pow","on","handleAccountsChanged","handleChainChanged","message","connectPublicClient","newChainId","accounts","disconnectWallet","removeListener","TransactionReview","contextTransactionDetails","useWallet","setTransaction","tradeDataBuySc","setTradeDataBuySc","setTxData","setMessage","txHash","setTxHash","newTransaction","tradeError","initializeTransaction","transactionReview","transactionInfo","transactionLabel","transactionValue","walletButton","builtTx","amountToSend","parseEther","parseUnits","to","data","encodeFunctionData","abi","inputs","internalType","type","outputs","stateMutability","functionName","args","sendTransaction","transactionLink","href","rel","explorerLink","color","textDecoration","fontWeight","cursor","wordBreak","slice","WidgetContent","buttonSize","handleClose","WidgetWithProviders","NetworkSelector","merchantConfig","blacklist","getBlacklist","getAvailableNetworks","reduce","acc","includes","MerchantConfig","options","amounts","Amounts","validateConfig","Widget","isDialogOpen","setIsDialogOpen","widgetContainer","handleOpenDialog","handleCloseDialog"],"mappings":"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"}