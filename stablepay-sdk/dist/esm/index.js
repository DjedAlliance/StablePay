import{getWeb3 as e,getDjedContract as t,getCoinContracts as n,getDecimals as r,getOracleAddress as a,getOracleContract as i,tradeDataPriceBuySc as o}from"djed-sdk";import s,{useContext as l,createContext as c,useState as d,useEffect as m,useCallback as u}from"react";import{createWalletClient as h,custom as g}from"viem";import{mainnet as k,sepolia as w}from"viem/chains";const C={sepolia:{uri:"https://ethereum-sepolia.publicnode.com/",chainId:11155111,djedAddress:"0x624FcD0a1F9B5820c950FefD48087531d38387f4",tokens:{stablecoin:{symbol:"SOD",address:"0x6b930182787F346F18666D167e8d32166dC5eFBD",decimals:18,isDirectTransfer:!0},native:{symbol:"ETH",decimals:18,isNative:!0}},feeUI:0},"milkomeda-mainnet":{uri:"https://rpc-mainnet-cardano-evm.c1.milkomeda.com",chainId:2001,djedAddress:"0x67A30B399F5Ed499C1a6Bc0358FA6e42Ea4BCe76",tokens:{stablecoin:{symbol:"MOD",address:"0xcbA90fB1003b9D1bc6a2b66257D2585011b004e9",decimals:18,isDirectTransfer:!0},native:{symbol:"mADA",decimals:18,isNative:!0}},feeUI:0},"ethereum-classic":{uri:"https://etc.rivet.link",chainId:61,djedAddress:"0xCc3664d7021FD36B1Fe2b136e2324710c8442cCf",tokens:{stablecoin:{symbol:"ECSD",address:"0x5A7Ca94F6E969C94bef4CE5e2f90ed9d4891918A",decimals:18,isDirectTransfer:!0},native:{symbol:"ETC",decimals:18,isNative:!0}},feeUI:0}};class b{constructor(e,t){this.networkUri=e,this.djedAddress=t}async init(){if(!this.networkUri||!this.djedAddress)throw new Error("Network URI and DJED address are required");try{this.web3=await e(this.networkUri),this.djedContract=t(this.web3,this.djedAddress);const{stableCoin:o,reserveCoin:s}=await n(this.djedContract,this.web3),{scDecimals:l,rcDecimals:c}=await r(o,s);this.stableCoin=o,this.reserveCoin=s,this.scDecimals=l,this.rcDecimals=c,this.oracleContract=await a(this.djedContract).then((e=>i(this.web3,e,this.djedContract._address))),this.oracleAddress=this.oracleContract._address,console.log("Transaction initialized successfully")}catch(e){throw console.error("Error initializing transaction:",e),e}}getBlockchainDetails(){return{web3Available:!!this.web3,djedContractAvailable:!!this.djedContract,stableCoinAddress:this.stableCoin?this.stableCoin._address:"N/A",reserveCoinAddress:this.reserveCoin?this.reserveCoin._address:"N/A",stableCoinDecimals:this.scDecimals,reserveCoinDecimals:this.rcDecimals,oracleAddress:this.oracleAddress||"N/A",oracleContractAvailable:!!this.oracleContract}}async handleTradeDataBuySc(e){if(!this.djedContract)throw new Error("DJED contract is not initialized");if("string"!=typeof e)throw new Error("Amount must be a string");try{return(await o(this.djedContract,this.scDecimals,e)).totalBCScaled}catch(e){throw console.error("Error fetching trade data for buying stablecoins: ",e),e}}}var v="main_stablePayButton__UA7HC",f="main_logo__ITyEy",_="main_buttonText__N-ewy";const N=({onClick:e,size:t="medium"})=>{const n={small:{width:"200px",height:"50px",fontSize:"14px"},medium:{width:"250px",height:"60px",fontSize:"16px"},large:{width:"300px",height:"70px",fontSize:"18px"}},r={small:{width:"35px",height:"33px"},medium:{width:"40px",height:"38px"},large:{width:"45px",height:"43px"}},a=n[t]||n.medium,i=r[t]||r.medium;return s.createElement("button",{className:v,onClick:e,style:a},s.createElement("div",{className:f,style:i}),s.createElement("span",{className:_},"Pay with StablePay"))};var y={dialogOverlay:"PricingCard_dialogOverlay__0XJrE",pricingCard:"PricingCard_pricingCard__LrWb9",small:"PricingCard_small__J4CHj",medium:"PricingCard_medium__EVmTB",large:"PricingCard_large__A6pnX",dialogClose:"PricingCard_dialogClose__jJ1tM",pricingCardHeader:"PricingCard_pricingCardHeader__wGczA",allianceLogo:"PricingCard_allianceLogo__URa-U",stablepayTitle:"PricingCard_stablepayTitle__4t848",pricingCardBody:"PricingCard_pricingCardBody__0wKQn",selectField:"PricingCard_selectField__LBPoZ",transactionReview:"PricingCard_transactionReview__Ix-eL",transactionInfo:"PricingCard_transactionInfo__Ck-Rc",transactionLabel:"PricingCard_transactionLabel__GDux7",transactionValue:"PricingCard_transactionValue__q-xxp",infoSection:"PricingCard_infoSection__gyjMQ",infoIcon:"PricingCard_infoIcon__rraxD",infoText:"PricingCard_infoText__l4b7A",walletButton:"PricingCard_walletButton__llw4v",loading:"PricingCard_loading__2-tGA",error:"PricingCard_error__m5fK-",networkError:"PricingCard_networkError__zR-36",errorText:"PricingCard_errorText__qZRJt"};const E=({children:e,onClose:t,size:n="medium"})=>s.createElement("div",{className:y.dialogOverlay},s.createElement("div",{className:`${y.pricingCard} ${y[n]}`},s.createElement("button",{className:y.dialogClose,onClick:t},"Ã—"),s.createElement("div",{className:y.pricingCardHeader},s.createElement("div",{className:y.allianceLogo}),s.createElement("h2",{className:y.stablepayTitle},"StablePay")),s.createElement("div",{className:y.pricingCardBody},e)));class p{constructor(e){this.networkSelector=e,this.selectedToken=null}selectToken(e){const t=this.networkSelector.getSelectedNetworkConfig();return!(!t||!t.tokens[e])&&(this.selectedToken={key:e,...t.tokens[e]},!0)}getSelectedToken(){return this.selectedToken}getAvailableTokens(){const e=this.networkSelector.getSelectedNetworkConfig();return e?Object.entries(e.tokens).map((([e,t])=>({key:e,...t}))):[]}resetSelection(){this.selectedToken=null}}const A=c(),T=({children:e,networkSelector:t})=>{const[n]=d((()=>new p(t))),[r,a]=d(null),[i,o]=d(null),[l,c]=d(null),u=()=>{o(null),c(null)};return m((()=>{a(t.selectedNetwork)}),[t.selectedNetwork]),s.createElement(A.Provider,{value:{networkSelector:t,tokenSelector:n,selectedNetwork:r,selectedToken:i,transactionDetails:l,setTransactionDetails:c,selectNetwork:e=>!!t.selectNetwork(e)&&(a(e),u(),!0),selectToken:e=>{if(n.selectToken(e)){const e=n.getSelectedToken();return o(e),!0}return!1},resetSelections:()=>{t.selectNetwork(null),a(null),u()}}},e)},S=()=>{const e=l(A);if(void 0===e)throw new Error("useNetwork must be used within a NetworkProvider");return e},D=()=>{const{networkSelector:e,selectedNetwork:t,selectNetwork:n}=S();return s.createElement("div",{className:y.selectField},s.createElement("label",{htmlFor:"network-select"},"Select Network"),s.createElement("select",{id:"network-select",onChange:e=>{n(e.target.value)},value:t||""},s.createElement("option",{value:"",disabled:!0},"Select a network"),Object.keys(e.availableNetworks).map((e=>s.createElement("option",{key:e,value:e},e)))))},P=()=>{const{networkSelector:e,tokenSelector:t,selectedNetwork:n,selectedToken:r,selectToken:a,setTransactionDetails:i}=S(),[o,l]=d(!1),[c,m]=d(null),u=n?t.getAvailableTokens():[];return s.createElement("div",{className:y.selectField},s.createElement("label",{htmlFor:"token-select"},"Select Token"),s.createElement("select",{id:"token-select",onChange:async r=>{const o=r.target.value;m(null),l(!0);try{if(a(o)){const r=e.getSelectedNetworkConfig(),a=new b(r.uri,r.djedAddress);await a.init();const s=e.getTokenAmount(o),l=a.getBlockchainDetails();let c=null;"native"===o&&(c=await a.handleTradeDataBuySc(String(s))),i({network:n,token:o,tokenSymbol:t.getSelectedToken().symbol,amount:s,receivingAddress:e.getReceivingAddress(),djedContractAddress:r.djedAddress,isDirectTransfer:t.getSelectedToken().isDirectTransfer||!1,isNativeToken:t.getSelectedToken().isNative||!1,tradeAmount:c?c.amount:null,...l})}}catch(e){console.error("Error fetching transaction details:",e),m("Failed to fetch transaction details. Please try again.")}finally{l(!1)}},value:r?r.key:"",disabled:!n||o},s.createElement("option",{value:"",disabled:!0},n?o?"Loading...":"Select a token":"Please select a network first"),u.map((e=>s.createElement("option",{key:e.key,value:e.key},e.symbol," (",e.isDirectTransfer?"Direct Transfer":"Native",")")))),c&&s.createElement("div",{className:y.error},c))},x=c(null),j=({children:e,networkConfig:t})=>{const[n,r]=d(null),[a,i]=d(null),[o,l]=d(null),[c,m]=d(null),[C,b]=d(!1),[v,f]=d(null),_=e=>({1:k,11155111:w}[e]),N=async e=>{const t=y();if(e!==t){const e=`Wrong network detected. Please switch to ${E(t)}`;return console.log(e),f(e),!1}return f(null),!0},y=()=>11155111,E=e=>({1:"Ethereum Mainnet",11155111:"Sepolia Testnet"}[e]||"Unknown Network"),p=u((async()=>{if(!window.ethereum)return m("Please install MetaMask or another Web3 wallet"),!1;b(!0),m(null);try{const e=await window.ethereum.request({method:"eth_requestAccounts"}),t=await window.ethereum.request({method:"eth_chainId"}),n=parseInt(t,16);await N(n);const a=_(n);if(!a)throw new Error("Unsupported chain");const o=h({chain:a,transport:g(window.ethereum)});return r(o),i(e[0]),l(n),window.ethereum.on("accountsChanged",S),window.ethereum.on("chainChanged",A),!0}catch(e){return console.error("Error connecting wallet:",e),m(e.message),!1}finally{b(!1)}}),[]),A=async e=>{const t=parseInt(e,16);l(t),await N(t);const n=_(t);if(n&&window.ethereum){const e=h({chain:n,transport:g(window.ethereum)});r(e)}},T=u((()=>{r(null),i(null),l(null),f(null),window.ethereum&&(window.ethereum.removeListener("accountsChanged",S),window.ethereum.removeListener("chainChanged",A))}),[]),S=e=>{0===e.length?T():i(e[0])};return s.createElement(x.Provider,{value:{walletClient:n,account:a,chainId:o,error:c,networkError:v,isConnecting:C,connectWallet:p,disconnectWallet:T,checkNetwork:N}},e)},B=()=>{const{networkSelector:e,tokenSelector:t,selectedNetwork:n,selectedToken:r,transactionDetails:a,setTransactionDetails:i}=S(),{connectWallet:o,account:c,chainId:u,error:h,networkError:g,isConnecting:k}=(()=>{const e=l(x);if(!e)throw new Error("useWallet must be used within a WalletProvider");return e})(),[w,C]=d(null),[v,f]=d(null),[_,N]=d(!1),[E,p]=d(null);m((()=>{(async()=>{if(n&&r){N(!0),p(null);try{const t=e.getSelectedNetworkConfig(),a=e.getReceivingAddress(),o=e.getTokenAmount(r.key);console.log("Selected Token Key:",r.key),console.log("Token Amount:",o);const s=new b(t.uri,t.djedAddress);await s.init(),C(s);const l=s.getBlockchainDetails();console.log("Blockchain Details:",l);let c=null;if("native"===r.key){console.log("Fetching trade data for native token");try{const e=String(o);c=await s.handleTradeDataBuySc(e),console.log("Trade data fetched:",c),f(c)}catch(e){console.error("Error fetching trade data:",e)}}else console.log("Stablecoin selected, skipping trade data fetch");console.log("Debug Information:",{tokenType:r.key,isDirectTransfer:r.isDirectTransfer,isNativeToken:r.isNative,tradeData:c,receivingAddress:a,djedContractAddress:t.djedAddress,blockchainDetails:l});const d={network:n,token:r.key,tokenSymbol:r.symbol,amount:o,receivingAddress:a,djedContractAddress:t.djedAddress,isDirectTransfer:r.isDirectTransfer||!1,isNativeToken:r.isNative||!1,tradeAmount:c?c.amount:null,...l};i(d)}catch(e){console.error("Error initializing transaction:",e),p("Failed to initialize transaction. Please try again.")}finally{N(!1)}}})()}),[n,r,e,i]);return _?s.createElement("div",{className:y.loading},"Loading transaction details..."):E?s.createElement("div",{className:y.error},E):n&&r&&a?s.createElement("div",{className:y.transactionReview},s.createElement("div",{className:y.transactionInfo},s.createElement("span",{className:y.transactionLabel},"Network:"),s.createElement("span",{className:y.transactionValue},a.network)),s.createElement("div",{className:y.transactionInfo},s.createElement("span",{className:y.transactionLabel},"You Pay:"),s.createElement("span",{className:y.transactionValue},"stablecoin"===r.key?`${a.amount} ${a.tokenSymbol}`:`${v||"Calculating..."} ${a.tokenSymbol}`)),s.createElement("div",{className:y.transactionInfo},s.createElement("span",{className:y.transactionLabel},"Merchant Receives:"),s.createElement("span",{className:y.transactionValue},`${a.amount} ${"stablecoin"===r.key?a.tokenSymbol:e.getSelectedNetworkConfig().tokens.stablecoin.symbol}`)),s.createElement("button",{className:y.walletButton,onClick:async()=>{await o()&&console.log("Wallet connected:",c)},disabled:k},k?"Connecting...":"Connect Wallet")):null},I=({onClose:e,buttonSize:t})=>{const{resetSelections:n}=S();return s.createElement(E,{onClose:()=>{n(),e()},size:t},s.createElement(D,null),s.createElement(P,null),s.createElement(B,null))},F=({onClose:e,buttonSize:t,networkSelector:n})=>s.createElement(T,{networkSelector:n},s.createElement(j,null,s.createElement(I,{onClose:e,buttonSize:t}))),z={NetworkSelector:class{constructor(e){this.merchantConfig=e,this.blacklist=e.getBlacklist(),this.availableNetworks=this.getAvailableNetworks(),this.selectedNetwork=null}getAvailableNetworks(){return Object.entries(C).reduce(((e,[t,n])=>(this.blacklist.includes(n.chainId)||(e[t]=n),e)),{})}selectNetwork(e){return null===e?(this.selectedNetwork=null,console.log("Network selection reset"),!0):this.availableNetworks[e]?(this.selectedNetwork=e,console.log(`Network selected: ${e}`),!0):(console.error(`Invalid network: ${e}`),!1)}getSelectedNetworkConfig(){return this.selectedNetwork?this.availableNetworks[this.selectedNetwork]:null}getReceivingAddress(){return this.merchantConfig.getReceivingAddress()}getTokenAmount(e){return this.merchantConfig.getTokenAmount(this.selectedNetwork,e)}},Transaction:b,MerchantConfig:class{constructor(e={}){this.receivingAddress=e.receivingAddress||"",this.blacklist=e.blacklist||[],this.amounts=e.Amounts||{},this.validateConfig()}validateConfig(){if(!this.receivingAddress)throw new Error("Receiving address is required");for(const[e,t]of Object.entries(this.amounts)){if(!C[e])throw new Error(`Invalid network: ${e}`);if(!t.stablecoin||"number"!=typeof t.stablecoin||t.stablecoin<=0)throw new Error(`Invalid stablecoin amount for network ${e}`)}}getBlacklist(){return this.blacklist}getReceivingAddress(){return this.receivingAddress}getTokenAmount(e){console.log("Getting amount for network:",e),console.log("Amounts object:",this.amounts);const t=this.amounts[e]?.stablecoin;return console.log("Returning amount:",t),t||0}},Widget:({networkSelector:e,buttonSize:t="medium"})=>{const[n,r]=d(!1);return s.createElement("div",{className:y.widgetContainer},!n&&s.createElement(N,{onClick:()=>{r(!0)},size:t}),n&&s.createElement(F,{onClose:()=>{r(!1)},buttonSize:t,networkSelector:e}))},PayButton:N,Dialog:E,NetworkDropdown:D};export{z as default};
