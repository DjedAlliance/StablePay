import{getWeb3 as e,getDjedContract as t,getCoinContracts as n,getDecimals as r,getOracleAddress as a,getOracleContract as o,tradeDataPriceBuySc as i,buyScTx as s}from"djed-sdk";import l,{useContext as c,createContext as d,useState as m,useEffect as u,useCallback as h}from"react";import{defineChain as w,createWalletClient as g,custom as k,createPublicClient as b,http as C,parseEther as p,parseUnits as _,encodeFunctionData as f}from"viem";const v={sepolia:{uri:"https://ethereum-sepolia.publicnode.com/",chainId:11155111,djedAddress:"0x624FcD0a1F9B5820c950FefD48087531d38387f4",tokens:{stablecoin:{symbol:"SOD",address:"0x6b930182787F346F18666D167e8d32166dC5eFBD",decimals:18,isDirectTransfer:!0},native:{symbol:"ETH",decimals:18,isNative:!0}},feeUI:0},"milkomeda-mainnet":{uri:"https://rpc-mainnet-cardano-evm.c1.milkomeda.com",chainId:2001,djedAddress:"0x67A30B399F5Ed499C1a6Bc0358FA6e42Ea4BCe76",tokens:{stablecoin:{symbol:"MOD",address:"0xcbA90fB1003b9D1bc6a2b66257D2585011b004e9",decimals:18,isDirectTransfer:!0},native:{symbol:"mADA",decimals:18,isNative:!0}},feeUI:0},"ethereum-classic":{uri:"https://rpc.mordor.etccooperative.org",chainId:63,djedAddress:"0xD4548F4b6d08852B56cdabC6be7Fd90953179d68",tokens:{stablecoin:{symbol:"ECSD",address:"0xffD4505B3452Dc22f8473616d50503bA9E1710Ac",decimals:18,isDirectTransfer:!0},native:{symbol:"ETC",decimals:18,isNative:!0}},feeUI:0}};class y{constructor(e,t){this.networkUri=e,this.djedAddress=t}async init(){if(!this.networkUri||!this.djedAddress)throw new Error("Network URI and DJED address are required");try{this.web3=await e(this.networkUri),this.djedContract=t(this.web3,this.djedAddress);const{stableCoin:i,reserveCoin:s}=await n(this.djedContract,this.web3),{scDecimals:l,rcDecimals:c}=await r(i,s);this.stableCoin=i,this.reserveCoin=s,this.scDecimals=l,this.rcDecimals=c,this.oracleContract=await a(this.djedContract).then((e=>o(this.web3,e,this.djedContract._address))),this.oracleAddress=this.oracleContract._address,console.log("Transaction initialized successfully")}catch(e){throw console.error("Error initializing transaction:",e),e}}getBlockchainDetails(){return{web3Available:!!this.web3,djedContractAvailable:!!this.djedContract,stableCoinAddress:this.stableCoin?this.stableCoin._address:"N/A",reserveCoinAddress:this.reserveCoin?this.reserveCoin._address:"N/A",stableCoinDecimals:this.scDecimals,reserveCoinDecimals:this.rcDecimals,oracleAddress:this.oracleAddress||"N/A",oracleContractAvailable:!!this.oracleContract}}async handleTradeDataBuySc(e){if(!this.djedContract)throw new Error("DJED contract is not initialized");if("string"!=typeof e)throw new Error("Amount must be a string");try{return(await i(this.djedContract,this.scDecimals,e)).totalBCScaled}catch(e){throw console.error("Error fetching trade data for buying stablecoins: ",e),e}}async buyStablecoins(e,t,n){if(!this.djedContract)throw new Error("DJED contract is not initialized");try{console.log(`Building stablecoin purchase transaction from ${e} to ${t} with value ${n}`);const r="0x0232556C83791b8291E9b23BfEa7d67405Bd9839",a=await s(this.djedContract,e,t,n,r,this.djedAddress);return console.log("Transaction built:",a),a}catch(e){throw console.error("Error executing buyStablecoins transaction: ",e),e}}}var E="main_stablePayButton__UA7HC",N="main_logo__ITyEy",T="main_buttonText__N-ewy";const S=({onClick:e,size:t="medium"})=>{const n={small:{width:"200px",height:"50px",fontSize:"14px"},medium:{width:"250px",height:"60px",fontSize:"16px"},large:{width:"300px",height:"70px",fontSize:"18px"}},r={small:{width:"35px",height:"33px"},medium:{width:"40px",height:"38px"},large:{width:"45px",height:"43px"}},a=n[t]||n.medium,o=r[t]||r.medium;return l.createElement("button",{className:E,onClick:e,style:a},l.createElement("div",{className:N,style:o}),l.createElement("span",{className:T},"Pay with StablePay"))};var A={dialogOverlay:"PricingCard_dialogOverlay__0XJrE",pricingCard:"PricingCard_pricingCard__LrWb9",small:"PricingCard_small__J4CHj",medium:"PricingCard_medium__EVmTB",large:"PricingCard_large__A6pnX",dialogClose:"PricingCard_dialogClose__jJ1tM",pricingCardHeader:"PricingCard_pricingCardHeader__wGczA",allianceLogo:"PricingCard_allianceLogo__URa-U",stablepayTitle:"PricingCard_stablepayTitle__4t848",pricingCardBody:"PricingCard_pricingCardBody__0wKQn",selectField:"PricingCard_selectField__LBPoZ",transactionReview:"PricingCard_transactionReview__Ix-eL",transactionInfo:"PricingCard_transactionInfo__Ck-Rc",transactionLabel:"PricingCard_transactionLabel__GDux7",transactionValue:"PricingCard_transactionValue__q-xxp",infoSection:"PricingCard_infoSection__gyjMQ",infoIcon:"PricingCard_infoIcon__rraxD",infoText:"PricingCard_infoText__l4b7A",walletButton:"PricingCard_walletButton__llw4v",loading:"PricingCard_loading__2-tGA",error:"PricingCard_error__m5fK-",networkError:"PricingCard_networkError__zR-36",errorText:"PricingCard_errorText__qZRJt","message-box":"PricingCard_message-box__vkUKy",detailsButton:"PricingCard_detailsButton__jHglL",errorDetails:"PricingCard_errorDetails__CzN-7",loadingContainer:"PricingCard_loadingContainer__6nOVa",spinner:"PricingCard_spinner__9ucQv",spin:"PricingCard_spin__24tni"};const D=({children:e,onClose:t,size:n="medium"})=>l.createElement("div",{className:A.dialogOverlay},l.createElement("div",{className:`${A.pricingCard} ${A[n]}`},l.createElement("button",{className:A.dialogClose,onClick:t},"×"),l.createElement("div",{className:A.pricingCardHeader},l.createElement("div",{className:A.allianceLogo}),l.createElement("h2",{className:A.stablepayTitle},"StablePay")),l.createElement("div",{className:A.pricingCardBody},e)));class P{constructor(e){this.networkSelector=e,this.selectedToken=null}selectToken(e){const t=this.networkSelector.getSelectedNetworkConfig();return!(!t||!t.tokens[e])&&(this.selectedToken={key:e,...t.tokens[e]},!0)}getSelectedToken(){return this.selectedToken}getAvailableTokens(){const e=this.networkSelector.getSelectedNetworkConfig();return e?Object.entries(e.tokens).map((([e,t])=>({key:e,...t}))):[]}resetSelection(){this.selectedToken=null}}const x=d(),B=({children:e,networkSelector:t})=>{const[n]=m((()=>new P(t))),[r,a]=m(null),[o,i]=m(null),[s,c]=m(null),d=()=>{i(null),c(null)};return u((()=>{a(t.selectedNetwork)}),[t.selectedNetwork]),l.createElement(x.Provider,{value:{networkSelector:t,tokenSelector:n,selectedNetwork:r,selectedToken:o,transactionDetails:s,setTransactionDetails:c,selectNetwork:e=>!!t.selectNetwork(e)&&(a(e),d(),!0),selectToken:e=>{if(n.selectToken(e)){const e=n.getSelectedToken();return i(e),!0}return!1},resetSelections:()=>{t.selectNetwork(null),a(null),d()}}},e)},j=()=>{const e=c(x);if(void 0===e)throw new Error("useNetwork must be used within a NetworkProvider");return e},I=()=>{const{networkSelector:e,selectedNetwork:t,selectNetwork:n}=j();return l.createElement("div",{className:A.selectField},l.createElement("label",{htmlFor:"network-select"},"Select Network"),l.createElement("select",{id:"network-select",onChange:e=>{n(e.target.value)},value:t||""},l.createElement("option",{value:"",disabled:!0},"Select a network"),Object.keys(e.availableNetworks).map((e=>l.createElement("option",{key:e,value:e},e)))))},M=()=>{const{networkSelector:e,tokenSelector:t,selectedNetwork:n,selectedToken:r,selectToken:a,setTransactionDetails:o}=j(),[i,s]=m(!1),[c,d]=m(null),u=n?t.getAvailableTokens():[];return l.createElement("div",{className:A.selectField},l.createElement("label",{htmlFor:"token-select"},"Select Token"),l.createElement("select",{id:"token-select",onChange:async r=>{const i=r.target.value;d(null),s(!0);try{if(a(i)){const r=e.getSelectedNetworkConfig(),a=new y(r.uri,r.djedAddress);await a.init();const s=e.getTokenAmount(i),l=a.getBlockchainDetails();let c=null;"native"===i&&(c=await a.handleTradeDataBuySc(String(s))),o({network:n,token:i,tokenSymbol:t.getSelectedToken().symbol,amount:s,receivingAddress:e.getReceivingAddress(),djedContractAddress:r.djedAddress,isDirectTransfer:t.getSelectedToken().isDirectTransfer||!1,isNativeToken:t.getSelectedToken().isNative||!1,tradeAmount:c?c.amount:null,...l})}}catch(e){console.error("Error fetching transaction details:",e),d("Failed to fetch transaction details. Please try again.")}finally{s(!1)}},value:r?r.key:"",disabled:!n||i},l.createElement("option",{value:"",disabled:!0},n?i?"Loading...":"Select a token":"Please select a network first"),u.map((e=>l.createElement("option",{key:e.key,value:e.key},e.symbol," (",e.isDirectTransfer?"Direct Transfer":"Native",")")))),c&&l.createElement("div",{className:A.error},c))},z=w({id:63,name:"Mordor Testnet",network:"mordor",nativeCurrency:{decimals:18,name:"Mordor Ether",symbol:"METC"},rpcUrls:{default:{http:["https://rpc.mordor.etccooperative.org"],webSocket:["wss://rpc.mordor.etccooperative.org/ws"]}},blockExplorers:{default:{name:"BlockScout",url:"https://blockscout.com/etc/mordor"}},testnet:!0}),F=d(null),L=({children:e})=>{const[t,n]=m(null),[r,a]=m(null),[o,i]=m(null),[s,c]=m(null),[d,w]=m(null),[p,_]=m(null),[f,v]=m(!1),y=z.id,E=h((async()=>{if(!window.ethereum)return _("Please install MetaMask or another Web3 wallet"),!1;v(!0),_(null);try{const e=await window.ethereum.request({method:"eth_requestAccounts"});if(0===e.length)throw new Error("No wallet address found. Please unlock your wallet.");const t=await window.ethereum.request({method:"eth_chainId"}),r=parseInt(t,16);if(r!==y)try{await window.ethereum.request({method:"wallet_switchEthereumChain",params:[{chainId:`0x${y.toString(16)}`}]})}catch(e){if(4902!==e.code)throw new Error("Please switch to Mordor Testnet in MetaMask");try{await window.ethereum.request({method:"wallet_addEthereumChain",params:[{chainId:`0x${y.toString(16)}`,chainName:"Mordor Testnet",nativeCurrency:{name:"Mordor ETC",symbol:"METC",decimals:18},rpcUrls:["https://rpc.mordor.etccooperative.org"],blockExplorerUrls:["https://etc-mordor.blockscout.com/"]}]})}catch(e){throw new Error("Failed to add Mordor Testnet to MetaMask")}}const a=g({chain:z,transport:k(window.ethereum)});n(a),i(e[0]),c(r);const o=b({chain:z,transport:C()}),s=await o.getBalance({address:e[0]});return w(parseFloat(s)/Math.pow(10,18)),window.ethereum.on("accountsChanged",S),window.ethereum.on("chainChanged",T),!0}catch(e){return console.error("Error connecting wallet:",e),_(e.message),!1}finally{v(!1)}}),[]),N=h((()=>{a(b({chain:z,transport:C()}))}),[]),T=async e=>{const t=parseInt(e,16);if(c(t),t===y){if(window.ethereum){const e=g({chain:z,transport:k(window.ethereum)});n(e)}}else _("Wrong network detected. Please switch to Mordor Testnet")},S=async e=>{if(0===e.length)A();else{i(e[0]);const t=b({chain:z,transport:C()}),n=await t.getBalance({address:e[0]});w(parseFloat(n)/Math.pow(10,18))}},A=h((()=>{n(null),i(null),c(null),w(null),window.ethereum&&(window.ethereum.removeListener("accountsChanged",S),window.ethereum.removeListener("chainChanged",T))}),[]);return u((()=>{N()}),[N]),l.createElement(F.Provider,{value:{walletClient:t,publicClient:r,account:o,chainId:s,balance:d,error:p,isConnecting:f,connectWallet:E,disconnectWallet:A}},e)},$=()=>{const{networkSelector:e,selectedNetwork:t,selectedToken:n,transactionDetails:r,setTransactionDetails:a}=j(),{connectWallet:o,account:i,walletClient:s,publicClient:d,isConnecting:h}=(()=>{const e=c(F);if(!e)throw new Error("useWallet must be used within a WalletProvider");return e})(),[w,g]=m(null),[k,b]=m(null),[C,v]=m(null),[E,N]=m(""),[T,S]=m(null),[D,P]=m(null),[x,B]=m(!1);if(u((()=>{(async()=>{if(t&&n)try{const r=e.getSelectedNetworkConfig(),o=e.getReceivingAddress(),i=e.getTokenAmount(n.key),s=new y(r.uri,r.djedAddress);await s.init(),g(s);let l=null;if("native"===n.key)try{l=await s.handleTradeDataBuySc(String(i)),b(l)}catch(e){console.error("Error fetching trade data:",e)}a({network:t,token:n.key,tokenSymbol:n.symbol,amount:i||"0",receivingAddress:o,djedContractAddress:r.djedAddress,isDirectTransfer:n.isDirectTransfer||!1,isNativeToken:n.isNative||!1,tradeAmount:l?l.amount:null,...s.getBlockchainDetails()})}catch(e){console.error("Error initializing transaction:",e)}})()}),[t,n,e,a]),!r)return l.createElement("div",{className:A.loading},"Initializing transaction...");return l.createElement("div",{className:A.transactionReview},l.createElement("div",{className:A.transactionInfo},l.createElement("span",{className:A.transactionLabel},"Network:"),l.createElement("span",{className:A.transactionValue},r.network)),l.createElement("div",{className:A.transactionInfo},l.createElement("span",{className:A.transactionLabel},"You Pay:"),l.createElement("span",{className:A.transactionValue},"stablecoin"===n.key?`${r.amount} ${r.tokenSymbol}`:`${k||"Calculating..."} ${r.tokenSymbol}`)),l.createElement("button",{className:A.walletButton,onClick:async()=>{await o()&&console.log("Wallet connected:",i)},disabled:h},h?"Connecting...":"Connect Wallet"),i&&!C&&l.createElement("button",{className:A.walletButton,onClick:async()=>{if(i&&r&&w)try{N("⏳ Preparing transaction...");const e=r.receivingAddress;let t;if("native"===n.key){const n="0x0232556C83791b8291E9b23BfEa7d67405Bd9839",r=k||"0";t=await w.buyStablecoins(i,e,p(String(r)),n)}else{const n=r.amount?_(String(r.amount),r.stableCoinDecimals):"0";t={to:"0xdc86935A9597aA3A9008d2f26232233043091284",data:f({abi:[{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"}],functionName:"transfer",args:[e,n]}),account:i}}v(t),N("✅ Transaction ready! Click 'Send Transaction' to proceed.")}catch(e){P(e),N("❌ Transaction preparation failed.")}else N("❌ Wallet not connected or transaction details missing")}},"Prepare Transaction"),i&&C&&l.createElement("button",{className:A.walletButton,onClick:async()=>{try{if(!s||!i||!C)return void N("❌ Wallet client, account, or transaction data is missing");N("⏳ Sending transaction...");const e=await s.sendTransaction({...C,account:i});S(e),N("✅ Transaction sent!")}catch(e){P(e),N("❌ Transaction failed.")}},disabled:null!==T},"Send Transaction"),E&&l.createElement("div",{className:"message-box"},E,D&&l.createElement("button",{onClick:()=>B(!x),className:A.detailsButton},x?"Hide Details":"Show Details")),x&&D&&l.createElement("div",{className:A.errorDetails},l.createElement("pre",null,D.message)),T&&l.createElement("div",{className:A.transactionLink},"✅ Transaction Hash:"," ",l.createElement("a",{href:`https://blockscout.com/etc/mordor/tx/${T}`,target:"_blank",rel:"noopener noreferrer",className:A.explorerLink,style:{color:"#007bff",textDecoration:"underline",fontWeight:"bold",cursor:"pointer",wordBreak:"break-word"}},T.slice(0,6),"...",T.slice(-6))))},R=({onClose:e,buttonSize:t})=>{const{resetSelections:n}=j();return l.createElement(D,{onClose:()=>{n(),e()},size:t},l.createElement(I,null),l.createElement(M,null),l.createElement($,null))},U=({onClose:e,buttonSize:t,networkSelector:n})=>l.createElement(B,{networkSelector:n},l.createElement(L,null,l.createElement(R,{onClose:e,buttonSize:t}))),W={NetworkSelector:class{constructor(e){this.merchantConfig=e,this.blacklist=e.getBlacklist(),this.availableNetworks=this.getAvailableNetworks(),this.selectedNetwork=null}getAvailableNetworks(){return Object.entries(v).reduce(((e,[t,n])=>(this.blacklist.includes(n.chainId)||(e[t]=n),e)),{})}selectNetwork(e){return null===e?(this.selectedNetwork=null,console.log("Network selection reset"),!0):this.availableNetworks[e]?(this.selectedNetwork=e,console.log(`Network selected: ${e}`),!0):(console.error(`Invalid network: ${e}`),!1)}getSelectedNetworkConfig(){return this.selectedNetwork?this.availableNetworks[this.selectedNetwork]:null}getReceivingAddress(){return this.merchantConfig.getReceivingAddress()}getTokenAmount(e){return this.merchantConfig.getTokenAmount(this.selectedNetwork,e)}},Transaction:y,MerchantConfig:class{constructor(e={}){this.receivingAddress=e.receivingAddress||"",this.blacklist=e.blacklist||[],this.amounts=e.Amounts||{},this.validateConfig()}validateConfig(){if(!this.receivingAddress)throw new Error("Receiving address is required");for(const[e,t]of Object.entries(this.amounts)){if(!v[e])throw new Error(`Invalid network: ${e}`);if(!t.stablecoin||"number"!=typeof t.stablecoin||t.stablecoin<=0)throw new Error(`Invalid stablecoin amount for network ${e}`)}}getBlacklist(){return this.blacklist}getReceivingAddress(){return this.receivingAddress}getTokenAmount(e){console.log("Getting amount for network:",e),console.log("Amounts object:",this.amounts);const t=this.amounts[e]?.stablecoin;return console.log("Returning amount:",t),t||0}},Widget:({networkSelector:e,buttonSize:t="medium"})=>{const[n,r]=m(!1);return l.createElement("div",{className:A.widgetContainer},!n&&l.createElement(S,{onClick:()=>{r(!0)},size:t}),n&&l.createElement(U,{onClose:()=>{r(!1)},buttonSize:t,networkSelector:e}))},PayButton:S,Dialog:D,NetworkDropdown:I};export{W as default};
